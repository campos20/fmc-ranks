{"version":3,"sources":["assets/logo.svg","api/scramble.web.api.js","components/ScrambleImagesTable.jsx","components/GenerateScrambles.jsx","util/result.util.js","components/Result.js","components/Rank.jsx","components/GenerateRank.jsx","components/Home.jsx","components/NavBar.jsx","components/About.jsx","util/move.util.js","components/ScrambleImage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getFmcScrambles","n","url","URL","baseUrl","searchParams","append","fetch","href","ScrambleImagesTable","state","copiedToClipboardIndex","image3d","setCopiedToClipboard","i","setState","scramble","document","createElement","body","appendChild","value","props","scrambles","select","execCommand","removeChild","handleImage3d","this","Fragment","length","className","type","onClick","id","htmlFor","map","key","e","event","visualization","Component","GenerateScrambles","numberOfScrambles","loading","error","handleNumberOfScramblesChange","target","handleClick","preventDefault","setLoading","then","response","json","data","catch","console","log","setError","flag","required","onChange","min","role","avg","list","trim","Infinity","copy","sort","sum","isNaN","Number","getConsecutiveValids","line","out","array","split","part","isValidResult","push","isValidLine","result","match","isDigit","toUpperCase","outputFormat","isFinite","toFixed","Result","results","name","single","best","compareResults","a","b","woajStyle","fontWeight","backgroundColor","positionStyle","dnfStyle","dnsStyle","Rank","filter","attempts","validLine","join","getName","woaj","Set","x","woajs","r","woajMean","woajMeanList","resultWidth","resultStyle","width","columns","posStyle","nameStyle","numberOfLines","Math","ceil","sortedWoajs","woajsToTrim","slice","tfoot","style","parenthesis","indexInWoajsToTrim","indexOf","splice","toPrint","tableClass","Array","from","_","k","apply","j","dataIndex","sortedResults","resultsToTrim","resultsAvg","woajAvgIndex","meanStyle","woajIndex","indexInResultsToTrim","getMaxTrim","max","floor","GenerateRank","content","handleAttemptsChange","handleContentChange","handleShrinkData","forEach","handleGenerate","handleReset","handleColumnsChange","handleTrimChange","placeholder","rows","Home","NavBar","Navbar","bg","expand","variant","fixedTop","Brand","baseLink","src","require","height","alt","Toggle","aria-controls","Collapse","Nav","Link","rankLink","scrambleLink","scrambleImageLink","aboutLink","About","isValidMove","move","isValidSingleMove","includes","isValid","reduce","ScrambleImage","validScrambles","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,6HCI9BC,EAAkB,SAACC,GAC9B,IAAIC,EAAM,IAAIC,IAAIC,yDAGlB,OAFAF,EAAIG,aAAaC,OAAO,oBAAqBL,GAEtCM,MAAML,EAAIM,OCgFJC,G,kNApFbC,MAAQ,CAAEC,uBAAwB,KAAMC,SAAS,G,EAEjDC,qBAAuB,SAACC,GACtB,EAAKC,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BC,uBAAwBG,KAGvD,IAAIE,EAAWC,SAASC,cAAc,YACtCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAASK,MAAQP,EAAI,EAAI,KAAO,EAAKQ,MAAMC,UAAUT,GACrDE,EAASQ,SACTP,SAASQ,YAAY,QACrBR,SAASE,KAAKO,YAAYV,I,EAG5BW,cAAgB,WACd,EAAKZ,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BE,SAAU,EAAKF,MAAME,Y,uDAG5C,IAAD,OACP,OAAKgB,KAAKN,MAAMC,UAKd,kBAAC,IAAMM,SAAP,KACGD,KAAKN,MAAMC,UAAUO,OAAS,GAC7B,yBAAKC,UAAU,OACb,yBAAKA,UAAU,8BAAf,yBAGA,yBAAKA,UAAU,+BACb,2BACEC,KAAK,WACLD,UAAU,mBACVV,MAAOO,KAAKlB,MAAME,QAClBqB,QAASL,KAAKD,cACdO,GAAG,iBAEL,2BAAOH,UAAU,mBAAmBI,QAAQ,gBAA5C,cAMN,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,UACb,2BAAOA,UAAU,yBACf,+BACGH,KAAKN,MAAMC,UAAUa,KAAI,SAACpB,EAAUF,GACnC,OACE,wBAAIuB,IAAKvB,GACP,wBACEiB,UAAU,eACVE,QAAS,SAACK,GAAD,OAAO,EAAKzB,qBAAqBC,KAE1C,yBAAKiB,UAAU,mBAAf,UACEjB,EAAI,EADN,aAEKE,IACL,yBAAKe,UAAU,6BAAf,OAEG,EAAKrB,MAAMC,yBAA2BG,EACnC,SACA,KAGR,wBAAIiB,UAAU,aACZ,sCACEQ,MAAM,MACNvB,SAAUA,EACVwB,cAAe,EAAK9B,MAAME,QAAU,KAAO,iBAjDxD,S,GArBqB6B,cCkGnBC,E,4MAhGbhC,MAAQ,CACNa,UAAW,GACXoB,kBAAmB,EACnBC,SAAS,EACTC,MAAO,GACPjC,SAAS,EACTD,uBAAwB,M,EAG1BmC,8BAAgC,SAACR,GAC/B,EAAKvB,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BiC,kBAAmBL,EAAES,OAAO1B,U,EAG7D2B,YAAc,SAACV,GACbA,EAAEW,iBACF,EAAKC,YAAW,GAChBlD,EAAgB,EAAKU,MAAMiC,mBACxBQ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKvC,SAAL,2BACK,EAAKL,OADV,IAEEa,UAAW+B,EAAK/B,UAChBqB,SAAS,EACTC,MAAO,GACPlC,uBAAwB,WAG3B4C,OAAM,SAACV,GACNW,QAAQC,IAAIZ,GACZ,EAAKK,YAAW,GAChB,EAAKQ,SAAS,yC,EAIpBR,WAAa,SAACS,GACZ,EAAK5C,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BkC,QAASe,M,uDAGhC,IAAD,OACP,OACE,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,wDAGJ,0BAAMA,UAAU,8BACd,yBAAKA,UAAU,SACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,wBAEF,2BACEC,KAAK,SACLD,UAAU,eACV6B,UAAQ,EACRvC,MAAOO,KAAKlB,MAAMiC,kBAClBkB,SAAU,SAACvB,GAAD,OAAO,EAAKQ,8BAA8BR,IACpDwB,IAAK,KAGT,yBAAK/B,UAAU,gBAAgBgC,KAAK,SAClC,4BACE/B,KAAK,SACLD,UAAU,4BACVE,QAASL,KAAKoB,aAHhB,yBAULpB,KAAKlB,MAAMkC,SACV,yBAAKb,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,iBAAiBgC,KAAK,UACnC,0BAAMhC,UAAU,WAAhB,mBAKLH,KAAKlB,MAAMmC,OACZ,yBAAKd,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,wBACb,8BAAOH,KAAKlB,MAAMmC,UAK1B,kBAAC,EAAD,CAAqBtB,UAAWK,KAAKlB,MAAMa,iB,GA3FnBkB,a,QCJzB,SAASuB,EAAIC,EAAMC,GACxB,GAAoB,IAAhBD,EAAKnC,OAAc,OAAOqC,IAE9B,IAAIC,EAAI,YAAOH,GACfG,EAAKC,OAGL,IADA,IAAIC,EAAM,EACDxD,EAAIoD,EAAMpD,EAAIsD,EAAKtC,OAASoC,EAAMpD,IAAK,CAC9C,GAAIyD,MAAMH,EAAKtD,IAAK,OAAOqD,IAC3BG,GAAOE,OAAOJ,EAAKtD,IAGrB,OAAOwD,GAAOF,EAAKtC,OAAS,EAAIoC,GAc3B,SAASO,EAAqBC,EAAMzE,GAGzC,IAFA,IAAI0E,EAAM,GACNC,EAAQF,EAAKG,MAAM,YACd/D,EAAI,EAAGA,EAAI8D,EAAM9C,OAAQhB,IAAK,CACrC,IAAIgE,EAAOF,EAAM9D,GAMjB,GALIiE,EAAcD,GAChBH,EAAIK,KAAKF,GAETH,EAAM,GAEJA,EAAI7C,SAAW7B,EACjB,OAAO0E,EAGX,OAAOA,EAGF,SAASM,EAAYP,EAAMzE,GAChC,OAAOwE,EAAqBC,EAAMzE,GAAG6B,SAAW7B,EAG3C,SAAS8E,EAAcG,GAE5B,QAMK,SAAiBA,GACtB,OAAQ,GAAKA,GAAQC,MAAM,UAPvBC,CAAQF,KACiB,QAAzBA,EAAOG,eACkB,QAAzBH,EAAOG,eAsBN,SAASC,EAAaJ,GAC3B,OAAKX,MAAMW,GAOkB,QAAzBA,EAAOG,cACF,MAEoB,QAAzBH,EAAOG,cACF,WADT,EATME,SAASL,GACJA,EAAOM,QAAQ,GAEf,MC5EN,IAAMC,EACX,WAAYC,EAASC,EAAMzB,GAAO,oBAChCtC,KAAKoC,IAAMA,EAAI0B,EAASxB,GACxBtC,KAAKgE,ODUF,SAAgB3B,GAGrB,IAFA,IAAI4B,EAAO1B,IAEFrD,EAAI,EAAGA,EAAImD,EAAKnC,OAAQhB,KAC1ByD,MAAMN,EAAKnD,KAAO0D,OAAOP,EAAKnD,IAAM+E,IACvCA,EAAOrB,OAAOP,EAAKnD,KAGvB,OAAO+E,EClBSD,CAAOF,GACrB9D,KAAK8D,QAAUA,EACf9D,KAAK+D,KAAOA,GAIT,SAASG,EAAeC,EAAGC,GAChC,OAAID,EAAE/B,IAAMgC,EAAEhC,KACJ,EAEN+B,EAAE/B,IAAMgC,EAAEhC,IACL,EAEL+B,EAAEH,OAASI,EAAEJ,QACP,EAENG,EAAEH,OAASI,EAAEJ,OACR,EAEF,ECdT,IAAMK,EAAY,CAChB,CAAEC,WAAY,OAAQC,gBAAiB,oBACvC,CAAED,WAAY,OAAQC,gBAAiB,sBACvC,CAAED,WAAY,OAAQC,gBAAiB,oBAGnCC,EAAgB,CACpBD,gBAAiB,oBAGbE,EAAW,CACfF,gBAAiB,kBAGbG,EAAW,CACfH,gBAAiB,oBAsLJI,E,uKAlLH,IAAD,OACHrC,EAAOtC,KAAKN,MAAM4C,KAGlBZ,EAAO1B,KAAKN,MAAMgC,KACnBkD,QAAO,SAAC9B,GAAD,OAAUO,EAAYP,EAAM,EAAKpD,MAAMmF,aAC9CrE,KAAI,SAACsC,GACJ,IAAIiB,EFuBL,SAAiBe,GAGtB,IAFA,IAAI/B,EAAM,GACNC,EAAQ8B,EAAU7B,MAAM,UACnB/D,EAAI,EAAGA,EAAI8D,EAAM9C,OAAQhB,IAAK,CACrC,IAAIgE,EAAOF,EAAM9D,GACjB,GAAKiE,EAAcD,GAGjB,MAFAH,EAAIK,KAAKF,GAKb,OAAOH,EAAIgC,KAAK,KElCCC,CAAQlC,GACfgB,EAAUjB,EAAqBC,EAAM,EAAKpD,MAAMmF,UACpD,OAAO,IAAIhB,EAAOC,EAASC,EAAMzB,MAElCG,KAAKyB,GAER,GAAoB,IAAhBxC,EAAKxB,OACP,OAAO,KAKT,IADA,IAAI+E,EAAO,GAlBJ,WAmBE/F,GACP+F,EAAK7B,KACH,YAAI,IAAI8B,IAAIxD,EAAKlB,KAAI,SAAC8C,GAAD,OAAYA,EAAOQ,QAAQ5E,QAC7C0F,QAAO,SAACO,GAAD,OAAQxC,MAAMwC,MACrB1C,SAJEvD,EAAI,EAAGA,EAAIc,KAAKN,MAAMmF,SAAU3F,IAAM,EAAtCA,GAOT,IAAIkG,EAAQH,EAAKzE,KAAI,SAAC6E,GAAD,OAAOA,EAAE,MAC1BC,EAAWlD,EAAIgD,EAAO9C,GAGtBiD,EAAe,YAAI,IAAIL,IAAIxD,EAAKlB,KAAI,SAAC8C,GAAD,OAAYA,EAAOlB,SACxDwC,QAAO,SAACO,GAAD,OAAOxB,SAASwB,MACvB1C,OAGC+C,EAAc,IAAQxF,KAAKN,MAAMmF,SAAW,GAI5CY,EAAc,CAAEC,MAAM,GAAD,OAAKF,EAAcxF,KAAKN,MAAMiG,QAA9B,MACrBC,EAAW,CAAEF,MAAM,GAAD,OAJP,GAIuB1F,KAAKN,MAAMiG,QAA3B,MAClBE,EAAY,CAAEH,MAAM,GAAD,OAJP,GAIwB1F,KAAKN,MAAMiG,QAA5B,MAEnBG,EAAgBC,KAAKC,KAAKtE,EAAKxB,OAASF,KAAKN,MAAMiG,SAEnDM,EAAc,YAAIb,GAAO3C,OACzByD,EAAW,sBACVD,EAAYE,MAAM,EAAG7D,IADX,YAEV2D,EAAYE,MAAMF,EAAY/F,OAASoC,EAAM2D,EAAY/F,UAE9D0B,QAAQC,IAAIqE,GAGZ,IAAIE,EACF,+BACE,wBAAIC,MAAOhC,EAAU,IACK,IAAvBrE,KAAKN,MAAMiG,SAAiB,6BAC7B,oCACCP,EAAM5E,KAAI,SAAC6E,EAAGnG,GACb,IAAIoH,GAAc,EACdC,EAAqBL,EAAYM,QAAQnB,GACzCkB,GAAsB,IACxBD,GAAc,EACdJ,EAAYO,OAAOF,EAAoB,IAEzC,IAAIG,EAAUrB,GAAK,IAEnB,OAAO,wBAAI5E,IAAKvB,GAAIoH,EAAW,WAAOI,EAAP,KAAoBA,MAErD,wBAAIL,MAAOhC,EAAU,IAAKX,EAAa4B,MAKzCqB,EAAa,+CAEjB,OACE,kBAAC,IAAM1G,SAAP,KACE,2BAAOE,UAAWwG,GAChB,2BAAOxG,UAAU,sBACf,4BACGyG,MAAMC,KAAK,CAAE3G,OAAQF,KAAKN,MAAMiG,UAAWnF,KAAI,SAACsG,EAAGC,GAClD,OACE,kBAAC,IAAM9G,SAAP,CAAgBQ,IAAKsG,GACnB,wBAAIV,MAAOT,GAAX,OACA,wBAAIS,MAAOR,GAAX,QACC,YACIe,MAAMI,MAAM,KAAM,CAAE9G,OAAQ,EAAKR,MAAMmF,YAC1CrE,KAAI,SAACsG,EAAG5H,GAAJ,OACJ,wBAAIuB,IAAKvB,EAAGmH,MAAOZ,GAAnB,WAAqCvG,EAAI,OAE3C,wBAAImH,MAAOZ,GAAuB,IAATnD,EAAa,OAAS,aAMzD,+BACGsE,MAAMC,KAAK,CAAE3G,OAAQ4F,IAAiBtF,KAAI,SAACsG,EAAG5H,GAC7C,OACE,wBAAIuB,IAAKvB,GACN0H,MAAMC,KAAK,CAAE3G,OAAQ,EAAKR,MAAMiG,UAAWnF,KAAI,SAACsG,EAAGG,GAClD,IAAIC,EAAYD,EAAInB,EAAgB5G,EACpC,GAAIgI,GAAaxF,EAAKxB,OACpB,OAAO,KAET,IAAIoD,EAAS5B,EAAKwF,GAEdC,EAAgB,YAAI7D,EAAOQ,SAASrB,OACpC2E,EAAa,sBACZD,EAAchB,MAAM,EAAG7D,IADX,YAEZ6E,EAAchB,MACfgB,EAAcjH,OAASoC,EACvB6E,EAAcjH,UAIdmH,EAAa/D,EAAOlB,IACpBkF,EAAe/B,EAAaiB,QAAQa,GACpCE,EAAY,GAIhB,OAHID,EAAejD,EAAUnE,SAC3BqH,EAAYlD,EAAUiD,IAGtB,kBAAC,IAAMrH,SAAP,CAAgBQ,IAAKwG,GACnB,wBAAIZ,MAAO7B,GACM,IAAd0C,GAIK,IAHNhD,EACExC,EAAKwF,GACLxF,EAAKwF,EAAY,IAEfA,EAAY,EACZ,KAEN,4BAAK5D,EAAOS,MACXT,EAAOQ,QAAQtD,KAAI,SAAC6E,EAAG0B,GACtB,IAAIS,EAAYvC,EAAK8B,GAAGP,QAAQnB,GAC5BgB,EAAQ,GAGRC,GAAc,EACdmB,EAAuBL,EAAcZ,QAAQnB,GAajD,OAZIoC,GAAwB,IAC1BnB,GAAc,EACdc,EAAcX,OAAOgB,EAAsB,IAGrB,QAApBpC,EAAE5B,cACJ4C,EAAQ5B,EACqB,QAApBY,EAAE5B,cACX4C,EAAQ3B,EACC8C,EAAYnD,EAAUnE,SAC/BmG,EAAQhC,EAAUmD,IAGlB,wBAAI/G,IAAKsG,EAAGV,MAAOA,GAChBC,EAAW,WAAOjB,EAAP,KAAcA,MAIhC,wBAAIgB,MAAOkB,GAAY7D,EAAaJ,EAAOlB,eAQjC,IAAvBpC,KAAKN,MAAMiG,SAAiBS,GAE9BpG,KAAKN,MAAMiG,QAAU,GACpB,2BAAOxF,UAAWwG,GAAaP,Q,GA5KtBvF,aCxBb6G,EAAa,SAACrJ,GAAD,OAAO0H,KAAK4B,IAAI,EAAG5B,KAAK6B,OAAOvJ,EAAI,GAAK,KAsK5CwJ,E,4MA7Jb/I,MAAQ,CACN+F,SAAU,EACVc,QAAS,EACTrD,KAAM,EACNZ,KAAM,GACNoG,QAAQ,I,EAGVC,qBAAuB,SAACrH,GACtB,IAAImE,EAAWjC,OAAOlC,EAAES,OAAO1B,OAC/B,EAAKN,SAAL,2BACK,EAAKL,OADV,IAEE+F,SAAUA,EACVvC,KAAMyD,KAAK7D,IAAI,EAAKpD,MAAMwD,KAAMoF,EAAW7C,Q,EAI/CmD,oBAAsB,SAACtH,GACrB,EAAKvB,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BgJ,QAASpH,EAAES,OAAO1B,U,EAGnDwI,iBAAmB,WACjB,IAAIlF,EAAM,GACV,EAAKjE,MAAMgJ,QAAQ7E,MAAM,MAAMiF,SAAQ,SAACpF,GAClCO,EAAYP,EAAM,EAAKhE,MAAM+F,WAC/B9B,EAAIK,KAAKN,EAAKR,WAKlB,EAAKnD,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BgJ,QAAS/E,EAAIgC,KAAK,U,EAGnDoD,eAAiB,SAACzH,GAChBA,EAAEW,iBACF,EAAK4G,mBAGL,EAAK9I,SAAL,2BAAmB,EAAKL,OAAxB,IAA+B4C,KAAM,EAAK5C,MAAMgJ,QAAQ7E,MAAM,U,EAGhEmF,YAAc,WACZ,EAAKjJ,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BgJ,QAAS,O,EAG1CO,oBAAsB,SAAC3H,GACrB,EAAKvB,SAAL,2BAAmB,EAAKL,OAAxB,IAA+B6G,QAAS/C,OAAOlC,EAAES,OAAO1B,W,EAG1D6I,iBAAmB,SAAC5H,GAClB,EAAKvB,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BwD,KAAMM,OAAOlC,EAAES,OAAO1B,W,uDAIrD,OACE,yBAAKU,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,+CAGJ,8BACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,8BACEA,UAAU,eACVV,MAAOO,KAAKlB,MAAMgJ,QAClB7F,SAAUjC,KAAKgI,oBACfO,YAAY,cACZvG,UAAQ,EACRwG,KAAK,SAKb,yBAAKrI,UAAU,8BACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBAAgBgC,KAAK,SAClC,4BACE/B,KAAK,SACLD,UAAU,4BACVE,QAASL,KAAKmI,gBAHhB,YAOA,4BACE/H,KAAK,SACLD,UAAU,4BACVE,QAASL,KAAKiI,kBAHhB,eAOA,4BACE7H,KAAK,QACLD,UAAU,4BACVE,QAASL,KAAKoI,aAHhB,WASJ,yBAAKjI,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,aAEF,2BACEC,KAAK,SACLD,UAAU,eACV6B,UAAQ,EACRvC,MAAOO,KAAKlB,MAAM+F,SAClB5C,SAAUjC,KAAK+H,qBACf7F,IAAK,IAEP,yBAAK/B,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,YAEF,2BACEC,KAAK,SACLD,UAAU,eACV6B,UAAQ,EACRvC,MAAOO,KAAKlB,MAAM6G,QAClB1D,SAAUjC,KAAKqI,oBACfnG,IAAK,IAEP,yBAAK/B,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,SAEF,2BACEC,KAAK,SACLD,UAAU,eACV6B,UAAQ,EACRvC,MAAOO,KAAKlB,MAAMwD,KAClBL,SAAUjC,KAAKsI,iBACfpG,IAAK,EACLyF,IAAKD,EAAW1H,KAAKlB,MAAM+F,gBAMrC,yBAAK1E,UAAU,8BACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACE0E,SAAU7E,KAAKlB,MAAM+F,SACrBnD,KAAM1B,KAAKlB,MAAM4C,KACjBiE,QAAS3F,KAAKlB,MAAM6G,QACpBrD,KAAMtC,KAAKlB,MAAMwD,c,GA3JJzB,aCgBZ4H,EAlBF,WACX,OACE,yBAAKtI,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,QAGJ,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,U,gBCqBKuI,EAjCA,SAAChJ,GACd,OACE,kBAACiJ,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,KAAKC,QAAQ,OAAOC,UAAQ,GACtD,kBAACJ,EAAA,EAAOK,MAAR,CAAcpK,KAAMc,EAAMuJ,UACxB,yBACEC,IAAKC,EAAQ,IACbzD,MAAM,KACN0D,OAAO,KACPjJ,UAAU,sCACVkJ,IAAI,UAGR,kBAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,qBAC7B,kBAACZ,EAAA,EAAOa,SAAR,CAAiBlJ,GAAG,oBAClB,kBAACmJ,EAAA,EAAD,CAAKtJ,UAAU,WACb,kBAACsJ,EAAA,EAAIC,KAAL,CAAUvJ,UAAU,aAAavB,KAAMc,EAAMiK,UAA7C,QAGA,kBAACF,EAAA,EAAIC,KAAL,CAAUvJ,UAAU,aAAavB,KAAMc,EAAMkK,cAA7C,YAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUvJ,UAAU,aAAavB,KAAMc,EAAMmK,mBAA7C,SAGA,kBAACJ,EAAA,EAAIC,KAAL,CAAUvJ,UAAU,aAAavB,KAAMc,EAAMoK,WAA7C,aCLKC,EApBD,kBACZ,yBAAK5J,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,uCAIJ,yBAAKA,UAAU,gBACb,gFACqD,IACnD,uBAAGvB,KAAK,0CAAR,QAFF,KAIA,0ICCAoL,EAAc,SAACC,GACnB,IAAKA,EACH,OAAO,EAET,GAAoB,IAAhBA,EAAK/J,QAAgB+J,EAAK/J,OAAS,EACrC,OAAO,EAGT,GAAoB,IAAhB+J,EAAK/J,SAAiBgK,EAAkBD,GAC1C,OAAO,EAGT,GAAoB,IAAhBA,EAAK/J,OAAc,CACrB,IAAKgK,EAAkBD,EAAK,IAC1B,OAAO,EAET,IApBqB,KAoBCE,SAASF,EAAK,KAAmB,MAAZA,EAAK,GAC9C,OAAO,EAKX,GAAoB,IAAhBA,EAAK/J,OAAc,CACrB,GAAgB,MAAZ+J,EAAK,GACP,OAAO,EAET,IA9BqB,KA8BCE,SAASF,EAAK,IAClC,OAAO,EAET,IAAKC,EAAkBD,EAAK,IAC1B,OAAO,EAIX,OAAO,GAIHC,EAAoB,SAACD,GAAD,MA3CL,SA4CNE,SAASF,IAzCC,MA0CNE,SAASF,IA3CN,MA4CNE,SAASF,IAEVG,EAxDC,SAAChL,GACf,OAAOA,EACJkD,OACAW,MAAM,KACNzC,IAAIwJ,GACJK,QAAO,SAAClG,EAAGC,GAAJ,OAAUD,GAAKC,KAAG,IC6CfkG,E,4MAhDbxL,MAAQ,CAAEgJ,QAAS,GAAIyC,eAAgB,I,EAEvCvC,oBAAsB,SAACtH,GACrB,EAAKvB,SAAL,2BAAmB,EAAKL,OAAxB,IAA+BgJ,QAASpH,EAAES,OAAO1B,U,EAGnD2B,YAAc,WACZ,IAAImJ,EAAiB,EAAKzL,MAAMgJ,QAAQ7E,MAAM,MAAM2B,OAAOwF,GAC3D,EAAKjL,SAAL,2BAAmB,EAAKL,OAAxB,IAA+ByL,qB,uDAI/B,OACE,yBAAKpK,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,OAAd,8BAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,8BACEA,UAAU,eACVV,MAAOO,KAAKlB,MAAMgJ,QAClB7F,SAAUjC,KAAKgI,oBACfO,YAAY,8BACZvG,UAAQ,EACRwG,KAAK,SAMb,yBAAKrI,UAAU,gBAAgBgC,KAAK,SAClC,4BACEhC,UAAU,4BACVE,QAASL,KAAKoB,aAFhB,oBAOF,kBAAC,EAAD,CAAqBzB,UAAWK,KAAKlB,MAAMyL,sB,GA3CvB1J,a,gBCmCb2J,MAvBf,WACE,OACE,kBAAC,IAAD,CAAYC,SARC,KASX,yBAAKtK,UAAU,OACb,kBAAC,EAAD,CACE8I,SAXO,IAYPU,SAXO,QAYPC,aAXW,YAYXC,kBAXgB,kBAYhBC,UAXQ,WAaV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAlBN,IAkBsBC,UAAWnC,IACxC,kBAAC,IAAD,CAAOkC,KAlBA,QAkBgBC,UAAW/C,IAClC,kBAAC,IAAD,CAAO8C,KAlBI,YAkBgBC,UAAW9J,IACtC,kBAAC,IAAD,CAAO6J,KAlBS,kBAkBgBC,UAAWN,IAC3C,kBAAC,IAAD,CAAOK,KAlBC,SAkBgBC,UAAWb,QCpBzBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzH,MACvB,2D,MCXN0H,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9L,SAAS+L,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhK,MAAK,SAAAiK,GACJA,EAAaC,gBAEd9J,OAAM,SAAAV,GACLW,QAAQX,MAAMA,EAAMyK,c","file":"static/js/main.7192cd7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b43c69b5.svg\";","const baseUrl = \"https://scramble-web-api.herokuapp.com\";\n//const baseUrl = \"http://localhost:2020\";\nconst scrambleEndpoint = \"/scramble\";\n\nexport const getFmcScrambles = (n) => {\n  let url = new URL(baseUrl + scrambleEndpoint + \"/333fm\");\n  url.searchParams.append(\"numberOfScrambles\", n);\n\n  return fetch(url.href);\n};\n","import React, { Component } from \"react\";\nimport { ScrambleDisplay } from \"scramble-display\"; // Actually, this is used\n\nclass ScrambleImagesTable extends Component {\n  state = { copiedToClipboardIndex: null, image3d: false };\n\n  setCopiedToClipboard = (i) => {\n    this.setState({ ...this.state, copiedToClipboardIndex: i });\n\n    // Copy to clipboard\n    var scramble = document.createElement(\"textarea\");\n    document.body.appendChild(scramble);\n    scramble.value = i + 1 + \". \" + this.props.scrambles[i];\n    scramble.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(scramble);\n  };\n\n  handleImage3d = () => {\n    this.setState({ ...this.state, image3d: !this.state.image3d });\n  };\n\n  render() {\n    if (!this.props.scrambles) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        {this.props.scrambles.length > 0 && (\n          <div className=\"row\">\n            <div className=\"col-6 text-left text-muted\">\n              You can click to copy\n            </div>\n            <div className=\"form-check col-6 text-right\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                value={this.state.image3d}\n                onClick={this.handleImage3d}\n                id=\"image3dcheck\"\n              />\n              <label className=\"form-check-label\" htmlFor=\"image3dcheck\">\n                3D image\n              </label>\n            </div>\n          </div>\n        )}\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <table className=\"table table-condensed\">\n              <tbody>\n                {this.props.scrambles.map((scramble, i) => {\n                  return (\n                    <tr key={i}>\n                      <td\n                        className=\"align-middle\"\n                        onClick={(e) => this.setCopiedToClipboard(i)}\n                      >\n                        <div className=\"row text-center\">{`${\n                          i + 1\n                        }. ${scramble}`}</div>\n                        <div className=\"row text-right text-muted\">\n                          &nbsp;\n                          {this.state.copiedToClipboardIndex === i\n                            ? \"Copied\"\n                            : \"\"}\n                        </div>\n                      </td>\n                      <td className=\"text-left\">\n                        <scramble-display\n                          event=\"333\"\n                          scramble={scramble}\n                          visualization={this.state.image3d ? \"3D\" : \"2D\"}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ScrambleImagesTable;\n","import React, { Component } from \"react\";\nimport { getFmcScrambles } from \"../api/scramble.web.api\";\nimport ScrambleImagesTable from \"./ScrambleImagesTable\";\n\nclass GenerateScrambles extends Component {\n  state = {\n    scrambles: [], // Put scrambles here for making developing quicker\n    numberOfScrambles: 3,\n    loading: false,\n    error: \"\",\n    image3d: false,\n    copiedToClipboardIndex: null,\n  };\n\n  handleNumberOfScramblesChange = (e) => {\n    this.setState({ ...this.state, numberOfScrambles: e.target.value });\n  };\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.setLoading(true);\n    getFmcScrambles(this.state.numberOfScrambles)\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          scrambles: data.scrambles,\n          loading: false,\n          error: \"\",\n          copiedToClipboardIndex: null, // In case there was a coppied scramble and we generate more\n        })\n      )\n      .catch((error) => {\n        console.log(error);\n        this.setLoading(false);\n        this.setError(\"Error while generating scrambles.\");\n      });\n  };\n\n  setLoading = (flag) => {\n    this.setState({ ...this.state, loading: flag });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3>Generate new Scrambles</h3>\n          </div>\n        </div>\n        <form className=\"row justify-content-center\">\n          <div className=\"col-6\">\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Number of Scrambles</span>\n              </div>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                required\n                value={this.state.numberOfScrambles}\n                onChange={(e) => this.handleNumberOfScramblesChange(e)}\n                min={1}\n              />\n            </div>\n            <div className=\"btn-group m-2\" role=\"group\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-group btn-primary\"\n                onClick={this.handleClick}\n              >\n                Generate Scrambles\n              </button>\n            </div>\n          </div>\n        </form>\n        {this.state.loading && (\n          <div className=\"row m-3\">\n            <div className=\"col-12\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        )}\n        {!!this.state.error && (\n          <div className=\"row m-3\">\n            <div className=\"col-12\">\n              <div className=\"bg-danger text-white\">\n                <span>{this.state.error}</span>\n              </div>\n            </div>\n          </div>\n        )}\n        <ScrambleImagesTable scrambles={this.state.scrambles} />\n      </div>\n    );\n  }\n}\n\nexport default GenerateScrambles;\n","export function avg(list, trim) {\n  if (list.length === 0) return Infinity;\n\n  let copy = [...list];\n  copy.sort();\n\n  let sum = 0;\n  for (var i = trim; i < copy.length - trim; i++) {\n    if (isNaN(copy[i])) return Infinity;\n    sum += Number(copy[i]);\n  }\n\n  return sum / (copy.length - 2 * trim);\n}\n\nexport function single(list) {\n  var best = Infinity;\n\n  for (var i = 0; i < list.length; i++) {\n    if (!isNaN(list[i]) && Number(list[i]) < best) {\n      best = Number(list[i]);\n    }\n  }\n  return best;\n}\n\nexport function getConsecutiveValids(line, n) {\n  var out = [];\n  var array = line.split(/[ ,=()]+/);\n  for (var i = 0; i < array.length; i++) {\n    var part = array[i];\n    if (isValidResult(part)) {\n      out.push(part);\n    } else {\n      out = [];\n    }\n    if (out.length === n) {\n      return out;\n    }\n  }\n  return out;\n}\n\nexport function isValidLine(line, n) {\n  return getConsecutiveValids(line, n).length === n;\n}\n\nexport function isValidResult(result) {\n  // We accept as valid any integer > 0, also DNF and DNS.\n  if (isDigit(result)) return true;\n  if (result.toUpperCase() === \"DNF\") return true;\n  if (result.toUpperCase() === \"DNS\") return true;\n  return false;\n}\n\nexport function isDigit(result) {\n  return (\"\" + result).match(/[0-9]+/);\n}\n\nexport function getName(validLine) {\n  var out = [];\n  var array = validLine.split(/[ ,=]+/);\n  for (var i = 0; i < array.length; i++) {\n    var part = array[i];\n    if (!isValidResult(part)) {\n      out.push(part);\n    } else {\n      break;\n    }\n  }\n  return out.join(\" \");\n}\n\nexport function outputFormat(result) {\n  if (!isNaN(result)) {\n    if (isFinite(result)) {\n      return result.toFixed(2);\n    } else {\n      return \"DNF\";\n    }\n  }\n  if (result.toUpperCase() === \"DNF\") {\n    return \"DNF\";\n  }\n  if (result.toUpperCase() === \"DNS\") {\n    return \"DNS\";\n  }\n}\n","import { avg, single } from \"../util/result.util\";\n\nexport class Result {\n  constructor(results, name, trim) {\n    this.avg = avg(results, trim);\n    this.single = single(results);\n    this.results = results;\n    this.name = name;\n  }\n}\n\nexport function compareResults(a, b) {\n  if (a.avg < b.avg) {\n    return -1;\n  }\n  if (a.avg > b.avg) {\n    return 1;\n  }\n  if (a.single < b.single) {\n    return -1;\n  }\n  if (a.single > b.single) {\n    return 1;\n  }\n  return 0;\n}\n","import React, { Component } from \"react\";\nimport {\n  getName,\n  getConsecutiveValids,\n  isValidLine,\n  outputFormat,\n  avg,\n} from \"../util/result.util\";\nimport { Result, compareResults } from \"./Result\";\n\nconst woajStyle = [\n  { fontWeight: \"bold\", backgroundColor: \"rgb(255, 204, 0)\" },\n  { fontWeight: \"bold\", backgroundColor: \"rgb(180, 180, 180)\" },\n  { fontWeight: \"bold\", backgroundColor: \"rgb(230, 77, 0)\" },\n];\n\nconst positionStyle = {\n  backgroundColor: \"rgb(57, 181, 90)\",\n};\n\nconst dnfStyle = {\n  backgroundColor: \"rgb(230, 0, 0)\",\n};\n\nconst dnsStyle = {\n  backgroundColor: \"rgb(0, 138, 230)\",\n};\n\nclass Rank extends Component {\n  render() {\n    let trim = this.props.trim;\n\n    // Clear results and sort by avg then single\n    let data = this.props.data\n      .filter((line) => isValidLine(line, this.props.attempts))\n      .map((line) => {\n        let name = getName(line);\n        let results = getConsecutiveValids(line, this.props.attempts);\n        return new Result(results, name, trim);\n      })\n      .sort(compareResults);\n\n    if (data.length === 0) {\n      return null;\n    }\n\n    // Woajs for formatting\n    let woaj = []; // List of lists with ordered results\n    for (let i = 0; i < this.props.attempts; i++) {\n      woaj.push(\n        [...new Set(data.map((result) => result.results[i]))]\n          .filter((x) => !isNaN(x)) // This prevents DNF, DNS from being tagged as woaj\n          .sort()\n      );\n    }\n    let woajs = woaj.map((r) => r[0]); // Best result of each attempt\n    let woajMean = avg(woajs, trim); // Mean of the best results\n\n    // Ordered list with all woajs\n    let woajMeanList = [...new Set(data.map((result) => result.avg))]\n      .filter((x) => isFinite(x)) // Prevents DNF, DNS from being tagged as woaj\n      .sort();\n\n    // Fixed style\n    let resultWidth = 50.0 / (this.props.attempts + 1); // +1 for mean\n    let posWidth = 50 * 0.2;\n    let nameWidth = 50 - posWidth;\n\n    let resultStyle = { width: `${resultWidth / this.props.columns}%` };\n    let posStyle = { width: `${posWidth / this.props.columns}%` };\n    let nameStyle = { width: `${nameWidth / this.props.columns}%` };\n\n    let numberOfLines = Math.ceil(data.length / this.props.columns);\n\n    let sortedWoajs = [...woajs].sort();\n    let woajsToTrim = [\n      ...sortedWoajs.slice(0, trim),\n      ...sortedWoajs.slice(sortedWoajs.length - trim, sortedWoajs.length),\n    ];\n    console.log(woajsToTrim);\n\n    // Using this we can detach tfoot in case of multiple columns\n    let tfoot = (\n      <tfoot>\n        <tr style={woajStyle[0]}>\n          {this.props.columns === 1 && <th />}\n          <th>Woaj</th>\n          {woajs.map((r, i) => {\n            let parenthesis = false;\n            let indexInWoajsToTrim = woajsToTrim.indexOf(r);\n            if (indexInWoajsToTrim >= 0) {\n              parenthesis = true;\n              woajsToTrim.splice(indexInWoajsToTrim, 1);\n            }\n            let toPrint = r || \"-\"; // Prevents all DNF from being blank\n\n            return <th key={i}>{parenthesis ? `(${toPrint})` : toPrint}</th>;\n          })}\n          <th style={woajStyle[0]}>{outputFormat(woajMean)}</th>\n        </tr>\n      </tfoot>\n    );\n\n    let tableClass = \"table table-condensed table-bordered m-0 p-0\";\n\n    return (\n      <React.Fragment>\n        <table className={tableClass}>\n          <thead className=\"bg-dark text-white\">\n            <tr>\n              {Array.from({ length: this.props.columns }).map((_, k) => {\n                return (\n                  <React.Fragment key={k}>\n                    <th style={posStyle}>Pos</th>\n                    <th style={nameStyle}>Name</th>\n                    {[\n                      ...Array.apply(null, { length: this.props.attempts }),\n                    ].map((_, i) => (\n                      <th key={i} style={resultStyle}>{`R${i + 1}`}</th>\n                    ))}\n                    <th style={resultStyle}>{trim === 0 ? \"Mean\" : \"Avg\"}</th>\n                  </React.Fragment>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: numberOfLines }).map((_, i) => {\n              return (\n                <tr key={i}>\n                  {Array.from({ length: this.props.columns }).map((_, j) => {\n                    let dataIndex = j * numberOfLines + i;\n                    if (dataIndex >= data.length) {\n                      return null;\n                    }\n                    let result = data[dataIndex];\n\n                    let sortedResults = [...result.results].sort();\n                    let resultsToTrim = [\n                      ...sortedResults.slice(0, trim),\n                      ...sortedResults.slice(\n                        sortedResults.length - trim,\n                        sortedResults.length\n                      ),\n                    ];\n\n                    let resultsAvg = result.avg;\n                    let woajAvgIndex = woajMeanList.indexOf(resultsAvg);\n                    let meanStyle = {};\n                    if (woajAvgIndex < woajStyle.length) {\n                      meanStyle = woajStyle[woajAvgIndex];\n                    }\n                    return (\n                      <React.Fragment key={j}>\n                        <th style={positionStyle}>\n                          {dataIndex === 0 || // Print \"-\"\" in case of ties\n                          compareResults(\n                            data[dataIndex],\n                            data[dataIndex - 1]\n                          ) !== 0\n                            ? dataIndex + 1\n                            : \"-\"}\n                        </th>\n                        <td>{result.name}</td>\n                        {result.results.map((r, k) => {\n                          let woajIndex = woaj[k].indexOf(r);\n                          let style = {};\n\n                          // Print with parenthesis if ignored during the average\n                          let parenthesis = false;\n                          let indexInResultsToTrim = resultsToTrim.indexOf(r);\n                          if (indexInResultsToTrim >= 0) {\n                            parenthesis = true;\n                            resultsToTrim.splice(indexInResultsToTrim, 1);\n                          }\n\n                          if (r.toUpperCase() === \"DNF\") {\n                            style = dnfStyle;\n                          } else if (r.toUpperCase() === \"DNS\") {\n                            style = dnsStyle;\n                          } else if (woajIndex < woajStyle.length) {\n                            style = woajStyle[woajIndex];\n                          }\n                          return (\n                            <td key={k} style={style}>\n                              {parenthesis ? `(${r})` : r}\n                            </td>\n                          );\n                        })}\n                        <td style={meanStyle}>{outputFormat(result.avg)}</td>\n                      </React.Fragment>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n          {this.props.columns === 1 && tfoot}\n        </table>\n        {this.props.columns > 1 && (\n          <table className={tableClass}>{tfoot}</table>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Rank;\n","import React, { Component } from \"react\";\nimport { isValidLine } from \"../util/result.util\";\nimport Rank from \"./Rank\";\n\nconst getMaxTrim = (n) => Math.max(0, Math.floor((n - 1) / 2));\n\nclass GenerateRank extends Component {\n  /*componentDidMount() {\n    // simulates a click to generate. Helps developing\n    let f = () => null;\n    this.handleGenerate({ preventDefault: f });\n  }*/\n\n  state = {\n    attempts: 3,\n    columns: 1,\n    trim: 0,\n    data: [],\n    content: ``, // Paste the raw data here for developing\n  };\n\n  handleAttemptsChange = (e) => {\n    let attempts = Number(e.target.value);\n    this.setState({\n      ...this.state,\n      attempts: attempts,\n      trim: Math.min(this.state.trim, getMaxTrim(attempts)), // In case we change attempts, we update trim\n    });\n  };\n\n  handleContentChange = (e) => {\n    this.setState({ ...this.state, content: e.target.value });\n  };\n\n  handleShrinkData = () => {\n    let out = [];\n    this.state.content.split(\"\\n\").forEach((line) => {\n      if (isValidLine(line, this.state.attempts)) {\n        out.push(line.trim());\n      }\n    });\n\n    // Change the raw content to the valid one\n    this.setState({ ...this.state, content: out.join(\"\\n\") });\n  };\n\n  handleGenerate = (e) => {\n    e.preventDefault();\n    this.handleShrinkData();\n\n    // Split the content into lines to generate\n    this.setState({ ...this.state, data: this.state.content.split(\"\\n\") });\n  };\n\n  handleReset = () => {\n    this.setState({ ...this.state, content: \"\" });\n  };\n\n  handleColumnsChange = (e) => {\n    this.setState({ ...this.state, columns: Number(e.target.value) });\n  };\n\n  handleTrimChange = (e) => {\n    this.setState({ ...this.state, trim: Number(e.target.value) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3>Generate Rank</h3>\n          </div>\n        </div>\n        <form>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"input-group\">\n                <textarea\n                  className=\"form-control\"\n                  value={this.state.content}\n                  onChange={this.handleContentChange}\n                  placeholder=\"Raw content\"\n                  required\n                  rows=\"8\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"row justify-content-center\">\n            <div className=\"col-sm-10\">\n              <div className=\"btn-group m-2\" role=\"group\">\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-group btn-success\"\n                  onClick={this.handleGenerate}\n                >\n                  Generate\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-group btn-primary\"\n                  onClick={this.handleShrinkData}\n                >\n                  Shrink Data\n                </button>\n                <button\n                  type=\"reset\"\n                  className=\"btn btn-group btn-warning\"\n                  onClick={this.handleReset}\n                >\n                  Reset\n                </button>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Attempts</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.attempts}\n                  onChange={this.handleAttemptsChange}\n                  min={1}\n                />\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Columns</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.columns}\n                  onChange={this.handleColumnsChange}\n                  min={1}\n                />\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Trim</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.trim}\n                  onChange={this.handleTrimChange}\n                  min={0}\n                  max={getMaxTrim(this.state.attempts)}\n                />\n              </div>\n            </div>\n          </div>\n        </form>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12\">\n            <Rank\n              attempts={this.state.attempts}\n              data={this.state.data}\n              columns={this.state.columns}\n              trim={this.state.trim}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GenerateRank;\n","import React from \"react\";\nimport GenerateRank from \"./GenerateRank\";\nimport GenerateScrambles from \"./GenerateScrambles\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <GenerateRank />\n        </div>\n      </div>\n      <br />\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <GenerateScrambles />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nconst NavBar = (props) => {\n  return (\n    <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\" fixedTop>\n      <Navbar.Brand href={props.baseLink}>\n        <img\n          src={require(\"../assets/logo.svg\")}\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top text-white\"\n          alt=\"Logo\"\n        />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link className=\"text-white\" href={props.rankLink}>\n            Rank\n          </Nav.Link>\n          <Nav.Link className=\"text-white\" href={props.scrambleLink}>\n            Scramble\n          </Nav.Link>\n          <Nav.Link className=\"text-white\" href={props.scrambleImageLink}>\n            Image\n          </Nav.Link>\n          <Nav.Link className=\"text-white\" href={props.aboutLink}>\n            About\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nconst About = () => (\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <h3>About</h3>\n      </div>\n    </div>\n\n    <div className=\"text-justify\">\n      <p>\n        This project is open source and you can contribute{\" \"}\n        <a href=\"https://github.com/campos20/fmc-ranks/\">here</a>.\n      </p>\n      <p>\n        At first, this was created to generate FMC ranks only, then it slowly\n        became a multi-purpose FMC project\n      </p>\n    </div>\n  </div>\n);\nexport default About;\n","// TODO find a better way to validate scrambles\n// I'm sure I'm not the first who needs it\n\nconst isValid = (scramble) => {\n  return scramble\n    .trim()\n    .split(\" \")\n    .map(isValidMove)\n    .reduce((a, b) => a && b, true);\n};\n\nconst allowedMoves = \"UFRDLB\";\nconst allowedModifiers = \"'2\";\nconst allowedSlices = \"MSE\";\nconst allowedRotations = \"xyz\";\n\nconst isValidMove = (move) => {\n  if (!move) {\n    return false;\n  }\n  if (move.length === 0 || move.length > 3) {\n    return false;\n  }\n\n  if (move.length === 1 && !isValidSingleMove(move)) {\n    return false;\n  }\n\n  if (move.length === 2) {\n    if (!isValidSingleMove(move[0])) {\n      return false;\n    }\n    if (!allowedModifiers.includes(move[1]) && move[1] !== \"w\") {\n      return false;\n    }\n  }\n\n  // Uw'\n  if (move.length === 3) {\n    if (move[1] !== \"w\") {\n      return false;\n    }\n    if (!allowedModifiers.includes(move[2])) {\n      return false;\n    }\n    if (!isValidSingleMove(move[0])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// moved.length === 1\nconst isValidSingleMove = (move) =>\n  allowedMoves.includes(move) ||\n  allowedRotations.includes(move) ||\n  allowedSlices.includes(move);\n\nexport default isValid;\n","import React, { Component } from \"react\";\nimport ScrambleImagesTable from \"./ScrambleImagesTable\";\nimport isValid from \"../util/move.util\";\n\nclass ScrambleImage extends Component {\n  state = { content: \"\", validScrambles: [] };\n\n  handleContentChange = (e) => {\n    this.setState({ ...this.state, content: e.target.value });\n  };\n\n  handleClick = () => {\n    let validScrambles = this.state.content.split(\"\\n\").filter(isValid);\n    this.setState({ ...this.state, validScrambles });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3 className=\"p-2\">Generate Scramble Images</h3>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"input-group\">\n              <textarea\n                className=\"form-control\"\n                value={this.state.content}\n                onChange={this.handleContentChange}\n                placeholder=\"Place scrambles 1 each line\"\n                required\n                rows=\"8\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn-group m-2\" role=\"group\">\n          <button\n            className=\"btn btn-group btn-primary\"\n            onClick={this.handleClick}\n          >\n            Generate Images\n          </button>\n        </div>\n        <ScrambleImagesTable scrambles={this.state.validScrambles} />\n      </div>\n    );\n  }\n}\n\nexport default ScrambleImage;\n","import React from \"react\";\nimport \"./App.css\";\nimport GenerateScrambles from \"./components/GenerateScrambles\";\nimport GenerateRank from \"./components/GenerateRank\";\nimport Home from \"./components/Home\";\nimport NavBar from \"./components/NavBar\";\nimport About from \"./components/About\";\nimport ScrambleImage from \"./components/ScrambleImage\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nconst baseLink = \"/\";\nconst rankLink = \"/rank\";\nconst scrambleLink = \"/scramble\";\nconst scrambleImageLink = \"/scramble-image\";\nconst aboutLink = \"/about\";\n\nfunction App() {\n  return (\n    <HashRouter basename={baseLink}>\n      <div className=\"App\">\n        <NavBar\n          baseLink={baseLink}\n          rankLink={rankLink}\n          scrambleLink={scrambleLink}\n          scrambleImageLink={scrambleImageLink}\n          aboutLink={aboutLink}\n        />\n        <Switch>\n          <Route exact path={baseLink} component={Home} />\n          <Route path={rankLink} component={GenerateRank} />\n          <Route path={scrambleLink} component={GenerateScrambles} />\n          <Route path={scrambleImageLink} component={ScrambleImage} />\n          <Route path={aboutLink} component={About} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}