{"version":3,"sources":["api/scramble.web.api.js","components/GenerateScrambles.jsx","util/result.util.js","components/Result.js","components/Rank.jsx","components/GenerateRank.jsx","App.js","serviceWorker.js","index.js"],"names":["getFmcScrambles","n","url","URL","baseUrl","searchParams","append","fetch","href","GenerateScrambles","state","scrambles","numberOfScrambles","loading","error","image3d","handleNumberOfScramblesChange","e","setState","target","value","handleClick","preventDefault","setLoading","then","response","json","data","catch","console","log","setError","flag","handleImage3d","className","type","required","this","onChange","min","role","onClick","length","id","htmlFor","map","scramble","i","key","event","visualization","Component","avg","list","Infinity","sum","isNaN","Number","getConsecutiveValids","line","out","array","split","part","isValidResult","push","isValidLine","result","match","isDigit","toUpperCase","outputFormat","isFinite","toFixed","Result","results","name","single","best","compareResults","a","b","woajStyle","fontWeight","backgroundColor","positionStyle","dnfStyle","dnsStyle","Rank","props","filter","attempts","validLine","join","getName","sort","woaj","Set","x","woajs","r","woajMean","woajMeanList","resultWidth","resultStyle","width","columns","posStyle","nameStyle","numberOfLines","Math","ceil","tfoot","style","tableClass","Fragment","Array","from","_","k","apply","j","dataIndex","resultsAvg","woajAvgIndex","indexOf","meanStyle","woajIndex","GenerateRank","content","handleAttemptsChange","handleContentChange","handleShrinkData","forEach","trim","handleGenerate","handleReset","handleColumnsChange","placeholder","rows","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.78d4746c.chunk.js","sourcesContent":["const baseUrl = \"https://scramble-web-api.herokuapp.com\";\n//const baseUrl = \"http://localhost:2020\";\nconst scrambleEndpoint = \"/scramble\";\n\nexport const getFmcScrambles = (n) => {\n  let url = new URL(baseUrl + scrambleEndpoint + \"/333fm\");\n  url.searchParams.append(\"numberOfScrambles\", n);\n\n  return fetch(url.href);\n};\n","import React, { Component } from \"react\";\nimport { getFmcScrambles } from \"../api/scramble.web.api\";\nimport { ScrambleDisplay } from \"scramble-display\"; // Actually, this is used\n\nclass GenerateScrambles extends Component {\n  state = {\n    scrambles: [], // Put scrambles here for making developing quicker\n    numberOfScrambles: 3,\n    loading: false,\n    error: \"\",\n    image3d: false,\n  };\n\n  handleNumberOfScramblesChange = (e) => {\n    this.setState({ ...this.state, numberOfScrambles: e.target.value });\n  };\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.setLoading(true);\n    getFmcScrambles(this.state.numberOfScrambles)\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          scrambles: data.scrambles,\n          loading: false,\n          error: \"\",\n        })\n      )\n      .catch((error) => {\n        console.log(error);\n        this.setLoading(false);\n        this.setError(\"Error while generating scrambles.\");\n      });\n  };\n\n  setLoading = (flag) => {\n    this.setState({ ...this.state, loading: flag });\n  };\n\n  handleImage3d = () => {\n    this.setState({ ...this.state, image3d: !this.state.image3d });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3>Generate new Scrambles</h3>\n          </div>\n        </div>\n        <form className=\"row justify-content-center\">\n          <div className=\"col-6\">\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Number of Scrambles</span>\n              </div>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                required\n                value={this.state.numberOfScrambles}\n                onChange={(e) => this.handleNumberOfScramblesChange(e)}\n                min={1}\n              />\n            </div>\n            <div className=\"btn-group m-2\" role=\"group\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-group btn-primary\"\n                onClick={this.handleClick}\n              >\n                Generate Scrambles\n              </button>\n            </div>\n          </div>\n        </form>\n\n        {this.state.scrambles.length > 0 && (\n          <div className=\"row\">\n            <div className=\"form-check col-12 text-right\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                value={this.state.image3d}\n                onClick={this.handleImage3d}\n                id=\"image3dcheck\"\n              />\n              <label className=\"form-check-label\" htmlFor=\"image3dcheck\">\n                3D image\n              </label>\n            </div>\n          </div>\n        )}\n\n        {this.state.loading && (\n          <div className=\"row m-3\">\n            <div className=\"col-12\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {!!this.state.error && (\n          <div className=\"row m-3\">\n            <div className=\"col-12\">\n              <div className=\"bg-danger text-white\">\n                <span>{this.state.error}</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <table className=\"table table-condensed\">\n              <tbody>\n                {!!this.state.scrambles &&\n                  this.state.scrambles.map((scramble, i) => {\n                    return (\n                      <tr key={i}>\n                        <td className=\"align-middle\">{`${\n                          i + 1\n                        }. ${scramble}`}</td>\n                        <td className=\"text-left\">\n                          <scramble-display\n                            event=\"333\"\n                            scramble={scramble}\n                            visualization={this.state.image3d ? \"3D\" : \"2D\"}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GenerateScrambles;\n","export function avg(list) {\n  if (list.length === 0) return Infinity;\n\n  var sum = 0;\n  for (var i = 0; i < list.length; i++) {\n    if (isNaN(list[i])) return Infinity;\n    sum += Number(list[i]);\n  }\n  return sum / list.length;\n}\n\nexport function single(list) {\n  var best = Infinity;\n\n  for (var i = 0; i < list.length; i++) {\n    if (!isNaN(list[i]) && Number(list[i]) < best) {\n      best = Number(list[i]);\n    }\n  }\n  return best;\n}\n\nexport function getConsecutiveValids(line, n) {\n  var out = [];\n  var array = line.split(/[ ,=]+/);\n  for (var i = 0; i < array.length; i++) {\n    var part = array[i];\n    if (isValidResult(part)) {\n      out.push(part);\n    } else {\n      out = [];\n    }\n    if (out.length === n) {\n      return out;\n    }\n  }\n  return out;\n}\n\nexport function isValidLine(line, n) {\n  return getConsecutiveValids(line, n).length === n;\n}\n\nexport function isValidResult(result) {\n  // We accept as valid any integer > 0, also DNF and DNS.\n  if (isDigit(result)) return true;\n  if (result.toUpperCase() === \"DNF\") return true;\n  if (result.toUpperCase() === \"DNS\") return true;\n  return false;\n}\n\nexport function isDigit(result) {\n  return (\"\" + result).match(/[0-9]+/);\n}\n\nexport function getName(validLine) {\n  var out = [];\n  var array = validLine.split(/[ ,=]+/);\n  for (var i = 0; i < array.length; i++) {\n    var part = array[i];\n    if (!isValidResult(part)) {\n      out.push(part);\n    } else {\n      break;\n    }\n  }\n  return out.join(\" \");\n}\n\nexport function outputFormat(result) {\n  if (!isNaN(result)) {\n    if (isFinite(result)) {\n      return result.toFixed(2);\n    } else {\n      return \"DNF\";\n    }\n  }\n  if (result.toUpperCase() === \"DNF\") {\n    return \"DNF\";\n  }\n  if (result.toUpperCase() === \"DNS\") {\n    return \"DNS\";\n  }\n}\n","import { avg, single } from \"../util/result.util\";\n\nexport class Result {\n  constructor(results, name) {\n    this.avg = avg(results);\n    this.single = single(results);\n    this.results = results;\n    this.name = name;\n  }\n}\n\nexport function compareResults(a, b) {\n  if (a.avg < b.avg) {\n    return -1;\n  }\n  if (a.avg > b.avg) {\n    return 1;\n  }\n  if (a.single < b.single) {\n    return -1;\n  }\n  if (a.single > b.single) {\n    return 1;\n  }\n  return 0;\n}\n","import React, { Component } from \"react\";\nimport {\n  getName,\n  getConsecutiveValids,\n  isValidLine,\n  outputFormat,\n  avg,\n} from \"../util/result.util\";\nimport { Result, compareResults } from \"./Result\";\n\nconst woajStyle = [\n  { fontWeight: \"bold\", backgroundColor: \"rgb(255, 204, 0)\" },\n  { fontWeight: \"bold\", backgroundColor: \"rgb(180, 180, 180)\" },\n  { fontWeight: \"bold\", backgroundColor: \"rgb(230, 77, 0)\" },\n];\n\nconst positionStyle = {\n  backgroundColor: \"rgb(57, 181, 90)\",\n};\n\nconst dnfStyle = {\n  backgroundColor: \"rgb(230, 0, 0)\",\n};\n\nconst dnsStyle = {\n  backgroundColor: \"rgb(0, 138, 230)\",\n};\n\nclass Rank extends Component {\n  render() {\n    // Clear results and sort by avg then single\n    let data = this.props.data\n      .filter((line) => isValidLine(line, this.props.attempts))\n      .map((line) => {\n        let name = getName(line);\n        let results = getConsecutiveValids(line, this.props.attempts);\n        return new Result(results, name);\n      })\n      .sort(compareResults);\n\n    if (data.length === 0) {\n      return null;\n    }\n\n    // Woajs for formatting\n    let woaj = []; // List of lists with ordered results\n    for (let i = 0; i < this.props.attempts; i++) {\n      woaj.push(\n        [...new Set(data.map((result) => result.results[i]))]\n          .filter((x) => !isNaN(x)) // This prevents DNF, DNS from being tagged as woaj\n          .sort()\n      );\n    }\n    let woajs = woaj.map((r) => r[0]); // Best result of each attempt\n    let woajMean = avg(woajs); // Mean of the best results\n\n    // Ordered list with all woajs\n    let woajMeanList = [...new Set(data.map((result) => result.avg))]\n      .filter((x) => isFinite(x)) // Prevents DNF, DNS from being tagged as woaj\n      .sort();\n\n    // Fixed style\n    let resultWidth = 50.0 / (this.props.attempts + 1); // +1 for mean\n    let posWidth = 50 * 0.2;\n    let nameWidth = 50 - posWidth;\n\n    let resultStyle = { width: `${resultWidth / this.props.columns}%` };\n    let posStyle = { width: `${posWidth / this.props.columns}%` };\n    let nameStyle = { width: `${nameWidth / this.props.columns}%` };\n\n    let numberOfLines = Math.ceil(data.length / this.props.columns);\n\n    // Using this we can detach tfoot in case of multiple columns\n    let tfoot = (\n      <tfoot>\n        <tr style={woajStyle[0]}>\n          {this.props.columns === 1 && <th />}\n          <th>Woaj</th>\n          {woajs.map((r, i) => (\n            <th key={i}>{r || \"-\"}</th>\n          ))}\n          <th style={woajStyle[0]}>{outputFormat(woajMean)}</th>\n        </tr>\n      </tfoot>\n    );\n\n    let tableClass = \"table table-condensed table-bordered m-0 p-0\";\n\n    return (\n      <React.Fragment>\n        <table className={tableClass}>\n          <thead className=\"bg-dark text-white\">\n            <tr>\n              {Array.from({ length: this.props.columns }).map((_, k) => {\n                return (\n                  <React.Fragment key={k}>\n                    <th style={posStyle}>Pos</th>\n                    <th style={nameStyle}>Name</th>\n                    {[\n                      ...Array.apply(null, { length: this.props.attempts }),\n                    ].map((_, i) => (\n                      <th key={i} style={resultStyle}>{`R${i + 1}`}</th>\n                    ))}\n                    <th style={resultStyle}>Mean</th>\n                  </React.Fragment>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: numberOfLines }).map((_, i) => {\n              return (\n                <tr key={i}>\n                  {Array.from({ length: this.props.columns }).map((_, j) => {\n                    let dataIndex = j * numberOfLines + i;\n                    if (dataIndex >= data.length) {\n                      return null;\n                    }\n                    let result = data[dataIndex];\n\n                    let resultsAvg = result.avg;\n                    let woajAvgIndex = woajMeanList.indexOf(resultsAvg);\n                    let meanStyle = {};\n                    if (woajAvgIndex < woajStyle.length) {\n                      meanStyle = woajStyle[woajAvgIndex];\n                    }\n                    return (\n                      <React.Fragment key={j}>\n                        <th style={positionStyle}>\n                          {dataIndex === 0 || // Print \"-\"\" in case of ties\n                          compareResults(\n                            data[dataIndex],\n                            data[dataIndex - 1]\n                          ) !== 0\n                            ? dataIndex + 1\n                            : \"-\"}\n                        </th>\n                        <td>{result.name}</td>\n                        {result.results.map((r, k) => {\n                          let woajIndex = woaj[k].indexOf(r);\n                          let style = {};\n                          if (r.toUpperCase() === \"DNF\") {\n                            style = dnfStyle;\n                          } else if (r.toUpperCase() === \"DNS\") {\n                            style = dnsStyle;\n                          } else if (woajIndex < woajStyle.length) {\n                            style = woajStyle[woajIndex];\n                          }\n                          return (\n                            <td key={k} style={style}>\n                              {r}\n                            </td>\n                          );\n                        })}\n                        <td style={meanStyle}>{outputFormat(result.avg)}</td>\n                      </React.Fragment>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n          {this.props.columns === 1 && tfoot}\n        </table>\n        {this.props.columns > 1 && (\n          <table className={tableClass}>{tfoot}</table>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Rank;\n","import React, { Component } from \"react\";\nimport { isValidLine } from \"../util/result.util\";\nimport Rank from \"./Rank\";\n\nclass GenerateRank extends Component {\n  /*componentDidMount() { // simulates a click to generate. Helps developing\n    let f = () => null;\n    this.handleGenerate({ preventDefault: f });\n  }*/\n\n  state = {\n    attempts: 3,\n    columns: 1,\n    data: [],\n    content: ``, // Paste the raw data here for developing\n  };\n\n  handleAttemptsChange = (e) => {\n    this.setState({ ...this.state, attempts: Number(e.target.value) });\n  };\n\n  handleContentChange = (e) => {\n    this.setState({ ...this.state, content: e.target.value });\n  };\n\n  handleShrinkData = () => {\n    let out = [];\n    this.state.content.split(\"\\n\").forEach((line) => {\n      if (isValidLine(line, this.state.attempts)) {\n        out.push(line.trim());\n      }\n    });\n\n    // Change the raw content to the valid one\n    this.setState({ ...this.state, content: out.join(\"\\n\") });\n  };\n\n  handleGenerate = (e) => {\n    e.preventDefault();\n    this.handleShrinkData();\n\n    // Split the content into lines to generate\n    this.setState({ ...this.state, data: this.state.content.split(\"\\n\") });\n  };\n\n  handleReset = () => {\n    this.setState({ ...this.state, content: \"\" });\n  };\n\n  handleColumnsChange = (e) => {\n    this.setState({ ...this.state, columns: Number(e.target.value) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3>Generate Rank</h3>\n          </div>\n        </div>\n        <form>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"input-group\">\n                <textarea\n                  className=\"form-control\"\n                  value={this.state.content}\n                  onChange={this.handleContentChange}\n                  placeholder=\"Raw content\"\n                  required\n                  rows=\"8\"\n                ></textarea>\n              </div>\n            </div>\n          </div>\n          <div className=\"row justify-content-center\">\n            <div className=\"col-4\">\n              <div className=\"btn-group m-2\" role=\"group\">\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-group btn-success\"\n                  onClick={this.handleGenerate}\n                >\n                  Generate\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-group btn-primary\"\n                  onClick={this.handleShrinkData}\n                >\n                  Shrink Data\n                </button>\n                <button\n                  type=\"reset\"\n                  className=\"btn btn-group btn-warning\"\n                  onClick={this.handleReset}\n                >\n                  Reset\n                </button>\n              </div>\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Attempts</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.attempts}\n                  onChange={this.handleAttemptsChange}\n                  min={1}\n                />\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Columns</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.columns}\n                  onChange={this.handleColumnsChange}\n                  min={1}\n                />\n              </div>\n            </div>\n          </div>\n        </form>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12\">\n            <Rank\n              attempts={this.state.attempts}\n              data={this.state.data}\n              columns={this.state.columns}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GenerateRank;\n","import React from \"react\";\nimport \"./App.css\";\nimport GenerateScrambles from \"./components/GenerateScrambles\";\nimport GenerateRank from \"./components/GenerateRank\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>FMC Ranks</h1>\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <GenerateRank />\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <GenerateScrambles />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}