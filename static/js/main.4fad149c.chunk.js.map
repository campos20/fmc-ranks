{"version":3,"sources":["api/scramble.web.api.js","components/GenerateScrambles.jsx","util/result.util.js","components/Result.js","components/Rank.jsx","components/GenerateRank.jsx","App.js","serviceWorker.js","index.js"],"names":["getFmcScrambles","n","url","URL","baseUrl","searchParams","append","fetch","href","GenerateScrambles","state","scrambles","numberOfScrambles","loading","error","image3d","copiedToClipboardIndex","handleNumberOfScramblesChange","e","setState","target","value","handleClick","preventDefault","setLoading","then","response","json","data","catch","console","log","setError","flag","handleImage3d","setCopiedToClipboard","i","scramble","document","createElement","body","appendChild","select","execCommand","removeChild","className","type","required","this","onChange","min","role","onClick","length","id","htmlFor","map","key","event","visualization","Component","avg","list","trim","Infinity","copy","sort","sum","isNaN","Number","getConsecutiveValids","line","out","array","split","part","isValidResult","push","isValidLine","result","match","isDigit","toUpperCase","outputFormat","isFinite","toFixed","Result","results","name","single","best","compareResults","a","b","woajStyle","fontWeight","backgroundColor","positionStyle","dnfStyle","dnsStyle","Rank","props","filter","attempts","validLine","join","getName","woaj","Set","x","woajs","r","woajMean","woajMeanList","resultWidth","resultStyle","width","columns","posStyle","nameStyle","numberOfLines","Math","ceil","sortedWoajs","woajsToTrim","slice","tfoot","style","parenthesis","indexInWoajsToTrim","indexOf","splice","toPrint","tableClass","Fragment","Array","from","_","k","apply","j","dataIndex","sortedResults","resultsToTrim","resultsAvg","woajAvgIndex","meanStyle","woajIndex","indexInResultsToTrim","getMaxTrim","max","floor","GenerateRank","content","handleAttemptsChange","handleContentChange","handleShrinkData","forEach","handleGenerate","handleReset","handleColumnsChange","handleTrimChange","placeholder","rows","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAIaA,EAAkB,SAACC,GAC9B,IAAIC,EAAM,IAAIC,IAAIC,yDAGlB,OAFAF,EAAIG,aAAaC,OAAO,oBAAqBL,GAEtCM,MAAML,EAAIM,OCoKJC,G,kNAvKbC,MAAQ,CACNC,UAAW,CAAC,GACZC,kBAAmB,EACnBC,SAAS,EACTC,MAAO,GACPC,SAAS,EACTC,uBAAwB,M,EAG1BC,8BAAgC,SAACC,GAC/B,EAAKC,SAAL,2BAAmB,EAAKT,OAAxB,IAA+BE,kBAAmBM,EAAEE,OAAOC,U,EAG7DC,YAAc,SAACJ,GACbA,EAAEK,iBACF,EAAKC,YAAW,GAChBxB,EAAgB,EAAKU,MAAME,mBACxBa,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAL,2BACK,EAAKT,OADV,IAEEC,UAAWiB,EAAKjB,UAChBE,SAAS,EACTC,MAAO,GACPE,uBAAwB,WAG3Ba,OAAM,SAACf,GACNgB,QAAQC,IAAIjB,GACZ,EAAKU,YAAW,GAChB,EAAKQ,SAAS,yC,EAIpBR,WAAa,SAACS,GACZ,EAAKd,SAAL,2BAAmB,EAAKT,OAAxB,IAA+BG,QAASoB,M,EAG1CC,cAAgB,WACd,EAAKf,SAAL,2BAAmB,EAAKT,OAAxB,IAA+BK,SAAU,EAAKL,MAAMK,Y,EAGtDoB,qBAAuB,SAACC,GACtB,EAAKjB,SAAL,2BAAmB,EAAKT,OAAxB,IAA+BM,uBAAwBoB,KAGvD,IAAIC,EAAWC,SAASC,cAAc,YACtCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAShB,MAAQe,EAAI,EAAI,KAAO,EAAK1B,MAAMC,UAAUyB,GACrDC,EAASK,SACTJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,I,uDAGlB,IAAD,OACP,OACE,yBAAKQ,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,wDAGJ,0BAAMA,UAAU,8BACd,yBAAKA,UAAU,SACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,wBAEF,2BACEC,KAAK,SACLD,UAAU,eACVE,UAAQ,EACR1B,MAAO2B,KAAKtC,MAAME,kBAClBqC,SAAU,SAAC/B,GAAD,OAAO,EAAKD,8BAA8BC,IACpDgC,IAAK,KAGT,yBAAKL,UAAU,gBAAgBM,KAAK,SAClC,4BACEL,KAAK,SACLD,UAAU,4BACVO,QAASJ,KAAK1B,aAHhB,yBAWL0B,KAAKtC,MAAMC,UAAU0C,OAAS,GAC7B,yBAAKR,UAAU,OACb,yBAAKA,UAAU,gCACb,2BACEC,KAAK,WACLD,UAAU,mBACVxB,MAAO2B,KAAKtC,MAAMK,QAClBqC,QAASJ,KAAKd,cACdoB,GAAG,iBAEL,2BAAOT,UAAU,mBAAmBU,QAAQ,gBAA5C,cAOLP,KAAKtC,MAAMG,SACV,yBAAKgC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,iBAAiBM,KAAK,UACnC,0BAAMN,UAAU,WAAhB,mBAMLG,KAAKtC,MAAMI,OACZ,yBAAK+B,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,wBACb,8BAAOG,KAAKtC,MAAMI,UAM1B,yBAAK+B,UAAU,OACb,yBAAKA,UAAU,UACb,2BAAOA,UAAU,yBACf,iCACKG,KAAKtC,MAAMC,WACZqC,KAAKtC,MAAMC,UAAU6C,KAAI,SAACnB,EAAUD,GAClC,OACE,wBAAIqB,IAAKrB,GACP,wBACES,UAAU,eACVO,QAAS,SAAClC,GAAD,OAAO,EAAKiB,qBAAqBC,KAE1C,yBAAKS,UAAU,mBAAf,UACET,EAAI,EADN,aAEKC,IACL,yBAAKQ,UAAU,6BAAf,OAEG,EAAKnC,MAAMM,yBAA2BoB,EACnC,SACA,KAGR,wBAAIS,UAAU,aACZ,sCACEa,MAAM,MACNrB,SAAUA,EACVsB,cAAe,EAAKjD,MAAMK,QAAU,KAAO,qB,GAzJvC6C,c,QCJzB,SAASC,EAAIC,EAAMC,GACxB,GAAoB,IAAhBD,EAAKT,OAAc,OAAOW,IAE9B,IAAIC,EAAI,YAAOH,GACfG,EAAKC,OAGL,IADA,IAAIC,EAAM,EACD/B,EAAI2B,EAAM3B,EAAI6B,EAAKZ,OAASU,EAAM3B,IAAK,CAC9C,GAAIgC,MAAMH,EAAK7B,IAAK,OAAO4B,IAC3BG,GAAOE,OAAOJ,EAAK7B,IAGrB,OAAO+B,GAAOF,EAAKZ,OAAS,EAAIU,GAc3B,SAASO,EAAqBC,EAAMtE,GAGzC,IAFA,IAAIuE,EAAM,GACNC,EAAQF,EAAKG,MAAM,YACdtC,EAAI,EAAGA,EAAIqC,EAAMpB,OAAQjB,IAAK,CACrC,IAAIuC,EAAOF,EAAMrC,GAMjB,GALIwC,EAAcD,GAChBH,EAAIK,KAAKF,GAETH,EAAM,GAEJA,EAAInB,SAAWpD,EACjB,OAAOuE,EAGX,OAAOA,EAGF,SAASM,EAAYP,EAAMtE,GAChC,OAAOqE,EAAqBC,EAAMtE,GAAGoD,SAAWpD,EAG3C,SAAS2E,EAAcG,GAE5B,QAMK,SAAiBA,GACtB,OAAQ,GAAKA,GAAQC,MAAM,UAPvBC,CAAQF,KACiB,QAAzBA,EAAOG,eACkB,QAAzBH,EAAOG,eAsBN,SAASC,EAAaJ,GAC3B,OAAKX,MAAMW,GAOkB,QAAzBA,EAAOG,cACF,MAEoB,QAAzBH,EAAOG,cACF,WADT,EATME,SAASL,GACJA,EAAOM,QAAQ,GAEf,MC5EN,IAAMC,EACX,WAAYC,EAASC,EAAMzB,GAAO,oBAChCf,KAAKa,IAAMA,EAAI0B,EAASxB,GACxBf,KAAKyC,ODUF,SAAgB3B,GAGrB,IAFA,IAAI4B,EAAO1B,IAEF5B,EAAI,EAAGA,EAAI0B,EAAKT,OAAQjB,KAC1BgC,MAAMN,EAAK1B,KAAOiC,OAAOP,EAAK1B,IAAMsD,IACvCA,EAAOrB,OAAOP,EAAK1B,KAGvB,OAAOsD,EClBSD,CAAOF,GACrBvC,KAAKuC,QAAUA,EACfvC,KAAKwC,KAAOA,GAIT,SAASG,EAAeC,EAAGC,GAChC,OAAID,EAAE/B,IAAMgC,EAAEhC,KACJ,EAEN+B,EAAE/B,IAAMgC,EAAEhC,IACL,EAEL+B,EAAEH,OAASI,EAAEJ,QACP,EAENG,EAAEH,OAASI,EAAEJ,OACR,EAEF,ECdT,IAAMK,EAAY,CAChB,CAAEC,WAAY,OAAQC,gBAAiB,oBACvC,CAAED,WAAY,OAAQC,gBAAiB,sBACvC,CAAED,WAAY,OAAQC,gBAAiB,oBAGnCC,EAAgB,CACpBD,gBAAiB,oBAGbE,EAAW,CACfF,gBAAiB,kBAGbG,EAAW,CACfH,gBAAiB,oBAsLJI,E,uKAlLH,IAAD,OACHrC,EAAOf,KAAKqD,MAAMtC,KAGlBnC,EAAOoB,KAAKqD,MAAMzE,KACnB0E,QAAO,SAAC/B,GAAD,OAAUO,EAAYP,EAAM,EAAK8B,MAAME,aAC9C/C,KAAI,SAACe,GACJ,IAAIiB,EFuBL,SAAiBgB,GAGtB,IAFA,IAAIhC,EAAM,GACNC,EAAQ+B,EAAU9B,MAAM,UACnBtC,EAAI,EAAGA,EAAIqC,EAAMpB,OAAQjB,IAAK,CACrC,IAAIuC,EAAOF,EAAMrC,GACjB,GAAKwC,EAAcD,GAGjB,MAFAH,EAAIK,KAAKF,GAKb,OAAOH,EAAIiC,KAAK,KElCCC,CAAQnC,GACfgB,EAAUjB,EAAqBC,EAAM,EAAK8B,MAAME,UACpD,OAAO,IAAIjB,EAAOC,EAASC,EAAMzB,MAElCG,KAAKyB,GAER,GAAoB,IAAhB/D,EAAKyB,OACP,OAAO,KAKT,IADA,IAAIsD,EAAO,GAlBJ,WAmBEvE,GACPuE,EAAK9B,KACH,YAAI,IAAI+B,IAAIhF,EAAK4B,KAAI,SAACuB,GAAD,OAAYA,EAAOQ,QAAQnD,QAC7CkE,QAAO,SAACO,GAAD,OAAQzC,MAAMyC,MACrB3C,SAJE9B,EAAI,EAAGA,EAAIY,KAAKqD,MAAME,SAAUnE,IAAM,EAAtCA,GAOT,IAAI0E,EAAQH,EAAKnD,KAAI,SAACuD,GAAD,OAAOA,EAAE,MAC1BC,EAAWnD,EAAIiD,EAAO/C,GAGtBkD,EAAe,YAAI,IAAIL,IAAIhF,EAAK4B,KAAI,SAACuB,GAAD,OAAYA,EAAOlB,SACxDyC,QAAO,SAACO,GAAD,OAAOzB,SAASyB,MACvB3C,OAGCgD,EAAc,IAAQlE,KAAKqD,MAAME,SAAW,GAI5CY,EAAc,CAAEC,MAAM,GAAD,OAAKF,EAAclE,KAAKqD,MAAMgB,QAA9B,MACrBC,EAAW,CAAEF,MAAM,GAAD,OAJP,GAIuBpE,KAAKqD,MAAMgB,QAA3B,MAClBE,EAAY,CAAEH,MAAM,GAAD,OAJP,GAIwBpE,KAAKqD,MAAMgB,QAA5B,MAEnBG,EAAgBC,KAAKC,KAAK9F,EAAKyB,OAASL,KAAKqD,MAAMgB,SAEnDM,EAAc,YAAIb,GAAO5C,OACzB0D,EAAW,sBACVD,EAAYE,MAAM,EAAG9D,IADX,YAEV4D,EAAYE,MAAMF,EAAYtE,OAASU,EAAM4D,EAAYtE,UAE9DvB,QAAQC,IAAI6F,GAGZ,IAAIE,EACF,+BACE,wBAAIC,MAAOjC,EAAU,IACK,IAAvB9C,KAAKqD,MAAMgB,SAAiB,6BAC7B,oCACCP,EAAMtD,KAAI,SAACuD,EAAG3E,GACb,IAAI4F,GAAc,EACdC,EAAqBL,EAAYM,QAAQnB,GACzCkB,GAAsB,IACxBD,GAAc,EACdJ,EAAYO,OAAOF,EAAoB,IAEzC,IAAIG,EAAUrB,GAAK,IAEnB,OAAO,wBAAItD,IAAKrB,GAAI4F,EAAW,WAAOI,EAAP,KAAoBA,MAErD,wBAAIL,MAAOjC,EAAU,IAAKX,EAAa6B,MAKzCqB,EAAa,+CAEjB,OACE,kBAAC,IAAMC,SAAP,KACE,2BAAOzF,UAAWwF,GAChB,2BAAOxF,UAAU,sBACf,4BACG0F,MAAMC,KAAK,CAAEnF,OAAQL,KAAKqD,MAAMgB,UAAW7D,KAAI,SAACiF,EAAGC,GAClD,OACE,kBAAC,IAAMJ,SAAP,CAAgB7E,IAAKiF,GACnB,wBAAIX,MAAOT,GAAX,OACA,wBAAIS,MAAOR,GAAX,QACC,YACIgB,MAAMI,MAAM,KAAM,CAAEtF,OAAQ,EAAKgD,MAAME,YAC1C/C,KAAI,SAACiF,EAAGrG,GAAJ,OACJ,wBAAIqB,IAAKrB,EAAG2F,MAAOZ,GAAnB,WAAqC/E,EAAI,OAE3C,wBAAI2F,MAAOZ,GAAuB,IAATpD,EAAa,OAAS,aAMzD,+BACGwE,MAAMC,KAAK,CAAEnF,OAAQmE,IAAiBhE,KAAI,SAACiF,EAAGrG,GAC7C,OACE,wBAAIqB,IAAKrB,GACNmG,MAAMC,KAAK,CAAEnF,OAAQ,EAAKgD,MAAMgB,UAAW7D,KAAI,SAACiF,EAAGG,GAClD,IAAIC,EAAYD,EAAIpB,EAAgBpF,EACpC,GAAIyG,GAAajH,EAAKyB,OACpB,OAAO,KAET,IAAI0B,EAASnD,EAAKiH,GAEdC,EAAgB,YAAI/D,EAAOQ,SAASrB,OACpC6E,EAAa,sBACZD,EAAcjB,MAAM,EAAG9D,IADX,YAEZ+E,EAAcjB,MACfiB,EAAczF,OAASU,EACvB+E,EAAczF,UAId2F,EAAajE,EAAOlB,IACpBoF,EAAehC,EAAaiB,QAAQc,GACpCE,EAAY,GAIhB,OAHID,EAAenD,EAAUzC,SAC3B6F,EAAYpD,EAAUmD,IAGtB,kBAAC,IAAMX,SAAP,CAAgB7E,IAAKmF,GACnB,wBAAIb,MAAO9B,GACM,IAAd4C,GAIK,IAHNlD,EACE/D,EAAKiH,GACLjH,EAAKiH,EAAY,IAEfA,EAAY,EACZ,KAEN,4BAAK9D,EAAOS,MACXT,EAAOQ,QAAQ/B,KAAI,SAACuD,EAAG2B,GACtB,IAAIS,EAAYxC,EAAK+B,GAAGR,QAAQnB,GAC5BgB,EAAQ,GAGRC,GAAc,EACdoB,EAAuBL,EAAcb,QAAQnB,GAajD,OAZIqC,GAAwB,IAC1BpB,GAAc,EACde,EAAcZ,OAAOiB,EAAsB,IAGrB,QAApBrC,EAAE7B,cACJ6C,EAAQ7B,EACqB,QAApBa,EAAE7B,cACX6C,EAAQ5B,EACCgD,EAAYrD,EAAUzC,SAC/B0E,EAAQjC,EAAUqD,IAGlB,wBAAI1F,IAAKiF,EAAGX,MAAOA,GAChBC,EAAW,WAAOjB,EAAP,KAAcA,MAIhC,wBAAIgB,MAAOmB,GAAY/D,EAAaJ,EAAOlB,eAQjC,IAAvBb,KAAKqD,MAAMgB,SAAiBS,GAE9B9E,KAAKqD,MAAMgB,QAAU,GACpB,2BAAOxE,UAAWwF,GAAaP,Q,GA5KtBlE,aCxBbyF,EAAa,SAACpJ,GAAD,OAAOwH,KAAK6B,IAAI,EAAG7B,KAAK8B,OAAOtJ,EAAI,GAAK,KAsK5CuJ,E,4MA7Jb9I,MAAQ,CACN6F,SAAU,GACVc,QAAS,EACTtD,KAAM,EACNnC,KAAM,GACN6H,QAAQ,I,EAGVC,qBAAuB,SAACxI,GACtB,IAAIqF,EAAWlC,OAAOnD,EAAEE,OAAOC,OAC/B,EAAKF,SAAL,2BACK,EAAKT,OADV,IAEE6F,SAAUA,EACVxC,KAAM0D,KAAKvE,IAAI,EAAKxC,MAAMqD,KAAMsF,EAAW9C,Q,EAI/CoD,oBAAsB,SAACzI,GACrB,EAAKC,SAAL,2BAAmB,EAAKT,OAAxB,IAA+B+I,QAASvI,EAAEE,OAAOC,U,EAGnDuI,iBAAmB,WACjB,IAAIpF,EAAM,GACV,EAAK9D,MAAM+I,QAAQ/E,MAAM,MAAMmF,SAAQ,SAACtF,GAClCO,EAAYP,EAAM,EAAK7D,MAAM6F,WAC/B/B,EAAIK,KAAKN,EAAKR,WAKlB,EAAK5C,SAAL,2BAAmB,EAAKT,OAAxB,IAA+B+I,QAASjF,EAAIiC,KAAK,U,EAGnDqD,eAAiB,SAAC5I,GAChBA,EAAEK,iBACF,EAAKqI,mBAGL,EAAKzI,SAAL,2BAAmB,EAAKT,OAAxB,IAA+BkB,KAAM,EAAKlB,MAAM+I,QAAQ/E,MAAM,U,EAGhEqF,YAAc,WACZ,EAAK5I,SAAL,2BAAmB,EAAKT,OAAxB,IAA+B+I,QAAS,O,EAG1CO,oBAAsB,SAAC9I,GACrB,EAAKC,SAAL,2BAAmB,EAAKT,OAAxB,IAA+B2G,QAAShD,OAAOnD,EAAEE,OAAOC,W,EAG1D4I,iBAAmB,SAAC/I,GAClB,EAAKC,SAAL,2BAAmB,EAAKT,OAAxB,IAA+BqD,KAAMM,OAAOnD,EAAEE,OAAOC,W,uDAIrD,OACE,yBAAKwB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,+CAGJ,8BACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,8BACEA,UAAU,eACVxB,MAAO2B,KAAKtC,MAAM+I,QAClBxG,SAAUD,KAAK2G,oBACfO,YAAY,cACZnH,UAAQ,EACRoH,KAAK,SAKb,yBAAKtH,UAAU,8BACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBAAgBM,KAAK,SAClC,4BACEL,KAAK,SACLD,UAAU,4BACVO,QAASJ,KAAK8G,gBAHhB,YAOA,4BACEhH,KAAK,SACLD,UAAU,4BACVO,QAASJ,KAAK4G,kBAHhB,eAOA,4BACE9G,KAAK,QACLD,UAAU,4BACVO,QAASJ,KAAK+G,aAHhB,WASJ,yBAAKlH,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,aAEF,2BACEC,KAAK,SACLD,UAAU,eACVE,UAAQ,EACR1B,MAAO2B,KAAKtC,MAAM6F,SAClBtD,SAAUD,KAAK0G,qBACfxG,IAAK,IAEP,yBAAKL,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,YAEF,2BACEC,KAAK,SACLD,UAAU,eACVE,UAAQ,EACR1B,MAAO2B,KAAKtC,MAAM2G,QAClBpE,SAAUD,KAAKgH,oBACf9G,IAAK,IAEP,yBAAKL,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,SAEF,2BACEC,KAAK,SACLD,UAAU,eACVE,UAAQ,EACR1B,MAAO2B,KAAKtC,MAAMqD,KAClBd,SAAUD,KAAKiH,iBACf/G,IAAK,EACLoG,IAAKD,EAAWrG,KAAKtC,MAAM6F,gBAMrC,yBAAK1D,UAAU,8BACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACE0D,SAAUvD,KAAKtC,MAAM6F,SACrB3E,KAAMoB,KAAKtC,MAAMkB,KACjByF,QAASrE,KAAKtC,MAAM2G,QACpBtD,KAAMf,KAAKtC,MAAMqD,c,GA3JJH,aCyBZwG,MA1Bf,WACE,OACE,yBAAKvH,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,2CAGJ,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,QAGJ,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,WCXQwH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxF,MACvB,2D,MCXNyF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrI,SAASsI,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtJ,MAAK,SAAAuJ,GACJA,EAAaC,gBAEdpJ,OAAM,SAAAf,GACLgB,QAAQhB,MAAMA,EAAMoK,c","file":"static/js/main.4fad149c.chunk.js","sourcesContent":["const baseUrl = \"https://scramble-web-api.herokuapp.com\";\n//const baseUrl = \"http://localhost:2020\";\nconst scrambleEndpoint = \"/scramble\";\n\nexport const getFmcScrambles = (n) => {\n  let url = new URL(baseUrl + scrambleEndpoint + \"/333fm\");\n  url.searchParams.append(\"numberOfScrambles\", n);\n\n  return fetch(url.href);\n};\n","import React, { Component } from \"react\";\nimport { getFmcScrambles } from \"../api/scramble.web.api\";\nimport { ScrambleDisplay } from \"scramble-display\"; // Actually, this is used\n\nclass GenerateScrambles extends Component {\n  state = {\n    scrambles: [,], // Put scrambles here for making developing quicker\n    numberOfScrambles: 3,\n    loading: false,\n    error: \"\",\n    image3d: false,\n    copiedToClipboardIndex: null,\n  };\n\n  handleNumberOfScramblesChange = (e) => {\n    this.setState({ ...this.state, numberOfScrambles: e.target.value });\n  };\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.setLoading(true);\n    getFmcScrambles(this.state.numberOfScrambles)\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          scrambles: data.scrambles,\n          loading: false,\n          error: \"\",\n          copiedToClipboardIndex: null, // In case there was a coppied scramble and we generate more\n        })\n      )\n      .catch((error) => {\n        console.log(error);\n        this.setLoading(false);\n        this.setError(\"Error while generating scrambles.\");\n      });\n  };\n\n  setLoading = (flag) => {\n    this.setState({ ...this.state, loading: flag });\n  };\n\n  handleImage3d = () => {\n    this.setState({ ...this.state, image3d: !this.state.image3d });\n  };\n\n  setCopiedToClipboard = (i) => {\n    this.setState({ ...this.state, copiedToClipboardIndex: i });\n\n    // Copy to clipboard\n    var scramble = document.createElement(\"textarea\");\n    document.body.appendChild(scramble);\n    scramble.value = i + 1 + \". \" + this.state.scrambles[i];\n    scramble.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(scramble);\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3>Generate new Scrambles</h3>\n          </div>\n        </div>\n        <form className=\"row justify-content-center\">\n          <div className=\"col-6\">\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Number of Scrambles</span>\n              </div>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                required\n                value={this.state.numberOfScrambles}\n                onChange={(e) => this.handleNumberOfScramblesChange(e)}\n                min={1}\n              />\n            </div>\n            <div className=\"btn-group m-2\" role=\"group\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-group btn-primary\"\n                onClick={this.handleClick}\n              >\n                Generate Scrambles\n              </button>\n            </div>\n          </div>\n        </form>\n\n        {this.state.scrambles.length > 0 && (\n          <div className=\"row\">\n            <div className=\"form-check col-12 text-right\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                value={this.state.image3d}\n                onClick={this.handleImage3d}\n                id=\"image3dcheck\"\n              />\n              <label className=\"form-check-label\" htmlFor=\"image3dcheck\">\n                3D image\n              </label>\n            </div>\n          </div>\n        )}\n\n        {this.state.loading && (\n          <div className=\"row m-3\">\n            <div className=\"col-12\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {!!this.state.error && (\n          <div className=\"row m-3\">\n            <div className=\"col-12\">\n              <div className=\"bg-danger text-white\">\n                <span>{this.state.error}</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <table className=\"table table-condensed\">\n              <tbody>\n                {!!this.state.scrambles &&\n                  this.state.scrambles.map((scramble, i) => {\n                    return (\n                      <tr key={i}>\n                        <td\n                          className=\"align-middle\"\n                          onClick={(e) => this.setCopiedToClipboard(i)}\n                        >\n                          <div className=\"row text-center\">{`${\n                            i + 1\n                          }. ${scramble}`}</div>\n                          <div className=\"row text-right text-muted\">\n                            &nbsp;\n                            {this.state.copiedToClipboardIndex === i\n                              ? \"Copied\"\n                              : \"\"}\n                          </div>\n                        </td>\n                        <td className=\"text-left\">\n                          <scramble-display\n                            event=\"333\"\n                            scramble={scramble}\n                            visualization={this.state.image3d ? \"3D\" : \"2D\"}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GenerateScrambles;\n","export function avg(list, trim) {\n  if (list.length === 0) return Infinity;\n\n  let copy = [...list];\n  copy.sort();\n\n  let sum = 0;\n  for (var i = trim; i < copy.length - trim; i++) {\n    if (isNaN(copy[i])) return Infinity;\n    sum += Number(copy[i]);\n  }\n\n  return sum / (copy.length - 2 * trim);\n}\n\nexport function single(list) {\n  var best = Infinity;\n\n  for (var i = 0; i < list.length; i++) {\n    if (!isNaN(list[i]) && Number(list[i]) < best) {\n      best = Number(list[i]);\n    }\n  }\n  return best;\n}\n\nexport function getConsecutiveValids(line, n) {\n  var out = [];\n  var array = line.split(/[ ,=()]+/);\n  for (var i = 0; i < array.length; i++) {\n    var part = array[i];\n    if (isValidResult(part)) {\n      out.push(part);\n    } else {\n      out = [];\n    }\n    if (out.length === n) {\n      return out;\n    }\n  }\n  return out;\n}\n\nexport function isValidLine(line, n) {\n  return getConsecutiveValids(line, n).length === n;\n}\n\nexport function isValidResult(result) {\n  // We accept as valid any integer > 0, also DNF and DNS.\n  if (isDigit(result)) return true;\n  if (result.toUpperCase() === \"DNF\") return true;\n  if (result.toUpperCase() === \"DNS\") return true;\n  return false;\n}\n\nexport function isDigit(result) {\n  return (\"\" + result).match(/[0-9]+/);\n}\n\nexport function getName(validLine) {\n  var out = [];\n  var array = validLine.split(/[ ,=]+/);\n  for (var i = 0; i < array.length; i++) {\n    var part = array[i];\n    if (!isValidResult(part)) {\n      out.push(part);\n    } else {\n      break;\n    }\n  }\n  return out.join(\" \");\n}\n\nexport function outputFormat(result) {\n  if (!isNaN(result)) {\n    if (isFinite(result)) {\n      return result.toFixed(2);\n    } else {\n      return \"DNF\";\n    }\n  }\n  if (result.toUpperCase() === \"DNF\") {\n    return \"DNF\";\n  }\n  if (result.toUpperCase() === \"DNS\") {\n    return \"DNS\";\n  }\n}\n","import { avg, single } from \"../util/result.util\";\n\nexport class Result {\n  constructor(results, name, trim) {\n    this.avg = avg(results, trim);\n    this.single = single(results);\n    this.results = results;\n    this.name = name;\n  }\n}\n\nexport function compareResults(a, b) {\n  if (a.avg < b.avg) {\n    return -1;\n  }\n  if (a.avg > b.avg) {\n    return 1;\n  }\n  if (a.single < b.single) {\n    return -1;\n  }\n  if (a.single > b.single) {\n    return 1;\n  }\n  return 0;\n}\n","import React, { Component } from \"react\";\nimport {\n  getName,\n  getConsecutiveValids,\n  isValidLine,\n  outputFormat,\n  avg,\n} from \"../util/result.util\";\nimport { Result, compareResults } from \"./Result\";\n\nconst woajStyle = [\n  { fontWeight: \"bold\", backgroundColor: \"rgb(255, 204, 0)\" },\n  { fontWeight: \"bold\", backgroundColor: \"rgb(180, 180, 180)\" },\n  { fontWeight: \"bold\", backgroundColor: \"rgb(230, 77, 0)\" },\n];\n\nconst positionStyle = {\n  backgroundColor: \"rgb(57, 181, 90)\",\n};\n\nconst dnfStyle = {\n  backgroundColor: \"rgb(230, 0, 0)\",\n};\n\nconst dnsStyle = {\n  backgroundColor: \"rgb(0, 138, 230)\",\n};\n\nclass Rank extends Component {\n  render() {\n    let trim = this.props.trim;\n\n    // Clear results and sort by avg then single\n    let data = this.props.data\n      .filter((line) => isValidLine(line, this.props.attempts))\n      .map((line) => {\n        let name = getName(line);\n        let results = getConsecutiveValids(line, this.props.attempts);\n        return new Result(results, name, trim);\n      })\n      .sort(compareResults);\n\n    if (data.length === 0) {\n      return null;\n    }\n\n    // Woajs for formatting\n    let woaj = []; // List of lists with ordered results\n    for (let i = 0; i < this.props.attempts; i++) {\n      woaj.push(\n        [...new Set(data.map((result) => result.results[i]))]\n          .filter((x) => !isNaN(x)) // This prevents DNF, DNS from being tagged as woaj\n          .sort()\n      );\n    }\n    let woajs = woaj.map((r) => r[0]); // Best result of each attempt\n    let woajMean = avg(woajs, trim); // Mean of the best results\n\n    // Ordered list with all woajs\n    let woajMeanList = [...new Set(data.map((result) => result.avg))]\n      .filter((x) => isFinite(x)) // Prevents DNF, DNS from being tagged as woaj\n      .sort();\n\n    // Fixed style\n    let resultWidth = 50.0 / (this.props.attempts + 1); // +1 for mean\n    let posWidth = 50 * 0.2;\n    let nameWidth = 50 - posWidth;\n\n    let resultStyle = { width: `${resultWidth / this.props.columns}%` };\n    let posStyle = { width: `${posWidth / this.props.columns}%` };\n    let nameStyle = { width: `${nameWidth / this.props.columns}%` };\n\n    let numberOfLines = Math.ceil(data.length / this.props.columns);\n\n    let sortedWoajs = [...woajs].sort();\n    let woajsToTrim = [\n      ...sortedWoajs.slice(0, trim),\n      ...sortedWoajs.slice(sortedWoajs.length - trim, sortedWoajs.length),\n    ];\n    console.log(woajsToTrim);\n\n    // Using this we can detach tfoot in case of multiple columns\n    let tfoot = (\n      <tfoot>\n        <tr style={woajStyle[0]}>\n          {this.props.columns === 1 && <th />}\n          <th>Woaj</th>\n          {woajs.map((r, i) => {\n            let parenthesis = false;\n            let indexInWoajsToTrim = woajsToTrim.indexOf(r);\n            if (indexInWoajsToTrim >= 0) {\n              parenthesis = true;\n              woajsToTrim.splice(indexInWoajsToTrim, 1);\n            }\n            let toPrint = r || \"-\"; // Prevents all DNF from being blank\n\n            return <th key={i}>{parenthesis ? `(${toPrint})` : toPrint}</th>;\n          })}\n          <th style={woajStyle[0]}>{outputFormat(woajMean)}</th>\n        </tr>\n      </tfoot>\n    );\n\n    let tableClass = \"table table-condensed table-bordered m-0 p-0\";\n\n    return (\n      <React.Fragment>\n        <table className={tableClass}>\n          <thead className=\"bg-dark text-white\">\n            <tr>\n              {Array.from({ length: this.props.columns }).map((_, k) => {\n                return (\n                  <React.Fragment key={k}>\n                    <th style={posStyle}>Pos</th>\n                    <th style={nameStyle}>Name</th>\n                    {[\n                      ...Array.apply(null, { length: this.props.attempts }),\n                    ].map((_, i) => (\n                      <th key={i} style={resultStyle}>{`R${i + 1}`}</th>\n                    ))}\n                    <th style={resultStyle}>{trim === 0 ? \"Mean\" : \"Avg\"}</th>\n                  </React.Fragment>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: numberOfLines }).map((_, i) => {\n              return (\n                <tr key={i}>\n                  {Array.from({ length: this.props.columns }).map((_, j) => {\n                    let dataIndex = j * numberOfLines + i;\n                    if (dataIndex >= data.length) {\n                      return null;\n                    }\n                    let result = data[dataIndex];\n\n                    let sortedResults = [...result.results].sort();\n                    let resultsToTrim = [\n                      ...sortedResults.slice(0, trim),\n                      ...sortedResults.slice(\n                        sortedResults.length - trim,\n                        sortedResults.length\n                      ),\n                    ];\n\n                    let resultsAvg = result.avg;\n                    let woajAvgIndex = woajMeanList.indexOf(resultsAvg);\n                    let meanStyle = {};\n                    if (woajAvgIndex < woajStyle.length) {\n                      meanStyle = woajStyle[woajAvgIndex];\n                    }\n                    return (\n                      <React.Fragment key={j}>\n                        <th style={positionStyle}>\n                          {dataIndex === 0 || // Print \"-\"\" in case of ties\n                          compareResults(\n                            data[dataIndex],\n                            data[dataIndex - 1]\n                          ) !== 0\n                            ? dataIndex + 1\n                            : \"-\"}\n                        </th>\n                        <td>{result.name}</td>\n                        {result.results.map((r, k) => {\n                          let woajIndex = woaj[k].indexOf(r);\n                          let style = {};\n\n                          // Print with parenthesis if ignored during the average\n                          let parenthesis = false;\n                          let indexInResultsToTrim = resultsToTrim.indexOf(r);\n                          if (indexInResultsToTrim >= 0) {\n                            parenthesis = true;\n                            resultsToTrim.splice(indexInResultsToTrim, 1);\n                          }\n\n                          if (r.toUpperCase() === \"DNF\") {\n                            style = dnfStyle;\n                          } else if (r.toUpperCase() === \"DNS\") {\n                            style = dnsStyle;\n                          } else if (woajIndex < woajStyle.length) {\n                            style = woajStyle[woajIndex];\n                          }\n                          return (\n                            <td key={k} style={style}>\n                              {parenthesis ? `(${r})` : r}\n                            </td>\n                          );\n                        })}\n                        <td style={meanStyle}>{outputFormat(result.avg)}</td>\n                      </React.Fragment>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n          {this.props.columns === 1 && tfoot}\n        </table>\n        {this.props.columns > 1 && (\n          <table className={tableClass}>{tfoot}</table>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Rank;\n","import React, { Component } from \"react\";\nimport { isValidLine } from \"../util/result.util\";\nimport Rank from \"./Rank\";\n\nconst getMaxTrim = (n) => Math.max(0, Math.floor((n - 1) / 2));\n\nclass GenerateRank extends Component {\n  /*componentDidMount() {\n    // simulates a click to generate. Helps developing\n    let f = () => null;\n    this.handleGenerate({ preventDefault: f });\n  }*/\n\n  state = {\n    attempts: 12,\n    columns: 1,\n    trim: 0,\n    data: [],\n    content: ``, // Paste the raw data here for developing\n  };\n\n  handleAttemptsChange = (e) => {\n    let attempts = Number(e.target.value);\n    this.setState({\n      ...this.state,\n      attempts: attempts,\n      trim: Math.min(this.state.trim, getMaxTrim(attempts)), // In case we change attempts, we update trim\n    });\n  };\n\n  handleContentChange = (e) => {\n    this.setState({ ...this.state, content: e.target.value });\n  };\n\n  handleShrinkData = () => {\n    let out = [];\n    this.state.content.split(\"\\n\").forEach((line) => {\n      if (isValidLine(line, this.state.attempts)) {\n        out.push(line.trim());\n      }\n    });\n\n    // Change the raw content to the valid one\n    this.setState({ ...this.state, content: out.join(\"\\n\") });\n  };\n\n  handleGenerate = (e) => {\n    e.preventDefault();\n    this.handleShrinkData();\n\n    // Split the content into lines to generate\n    this.setState({ ...this.state, data: this.state.content.split(\"\\n\") });\n  };\n\n  handleReset = () => {\n    this.setState({ ...this.state, content: \"\" });\n  };\n\n  handleColumnsChange = (e) => {\n    this.setState({ ...this.state, columns: Number(e.target.value) });\n  };\n\n  handleTrimChange = (e) => {\n    this.setState({ ...this.state, trim: Number(e.target.value) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3>Generate Rank</h3>\n          </div>\n        </div>\n        <form>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"input-group\">\n                <textarea\n                  className=\"form-control\"\n                  value={this.state.content}\n                  onChange={this.handleContentChange}\n                  placeholder=\"Raw content\"\n                  required\n                  rows=\"8\"\n                ></textarea>\n              </div>\n            </div>\n          </div>\n          <div className=\"row justify-content-center\">\n            <div className=\"col-sm-10\">\n              <div className=\"btn-group m-2\" role=\"group\">\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-group btn-success\"\n                  onClick={this.handleGenerate}\n                >\n                  Generate\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-group btn-primary\"\n                  onClick={this.handleShrinkData}\n                >\n                  Shrink Data\n                </button>\n                <button\n                  type=\"reset\"\n                  className=\"btn btn-group btn-warning\"\n                  onClick={this.handleReset}\n                >\n                  Reset\n                </button>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Attempts</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.attempts}\n                  onChange={this.handleAttemptsChange}\n                  min={1}\n                />\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Columns</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.columns}\n                  onChange={this.handleColumnsChange}\n                  min={1}\n                />\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Trim</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  required\n                  value={this.state.trim}\n                  onChange={this.handleTrimChange}\n                  min={0}\n                  max={getMaxTrim(this.state.attempts)}\n                />\n              </div>\n            </div>\n          </div>\n        </form>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12\">\n            <Rank\n              attempts={this.state.attempts}\n              data={this.state.data}\n              columns={this.state.columns}\n              trim={this.state.trim}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GenerateRank;\n","import React from \"react\";\nimport \"./App.css\";\nimport GenerateScrambles from \"./components/GenerateScrambles\";\nimport GenerateRank from \"./components/GenerateRank\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>FMC Ranks</h1>\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <GenerateRank />\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <GenerateScrambles />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}